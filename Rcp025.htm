<!DOCTYPE HTML>
<html>

<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Masoor Daal</title>
  <link rel="StyleSheet" href="rcp.css" type="text/css" media="screen">
  <meta name="RCP-Speise-Kategorie" content="Vegetarisch">
  <meta name="RCP-Speise-Kategorie" content="Beilagen">
  <meta name="RCP-Region" content="Indisch">
  <meta name="RCP-Zutat" content="Butter">
  <meta name="RCP-Zutat" content="Knoblauch">
  <meta name="RCP-Zutat" content="Zwiebeln">
  <meta name="RCP-Zutat" content="Kurkuma">
  <meta name="RCP-Zutat" content="Kreuzk&uuml;mmelpulver">
  <meta name="RCP-Zutat" content="Korianderpulver">
  <meta name="RCP-Zutat" content="Zucker">
  <meta name="RCP-Zutat" content="Chilipulver">
  <meta name="RCP-Zutat" content="Pelati">
  <meta name="RCP-Zutat" content="Linsen">
  <meta name="RCP-Zutat" content="Petersilie">
  <meta name="RCP-Zutat" content="Garam Masala">
  <meta name="RCP-Bewertung" content="4 Sterne">
  <meta name="RCP-Quelle" content="Betty Bossi">
</head>

<body>
  <h1>Masoor Daal</h1>
  <img src="Rcp025.jpg" alt="Masoor Daal" width="400" height="293">

  <table>
    <tbody>
      <tr>
        <td colspan="2">
          <strong>Zutaten f&uuml;r 4 Personen:</strong>
        </td>
      </tr>
      <tr>
        <td class="td-qty">1 El</td>
        <td><strong>Bratbutter</strong></td>
      </tr>
      <tr>
        <td class="td-qty">1</td>
        <td><strong>Knoblauchzehe</strong>, gepresst</td>
      </tr>
      <tr>
        <td class="td-qty">1</td>
        <td><strong>Zwiebel</strong>, fein gehackt</td>
      </tr>
      <tr>
        <td class="td-qty">1/2 Tl</td>
        <td><strong>Kurkuma</strong></td>
      </tr>
      <tr>
        <td class="td-qty">1/4 Tl</td>
        <td><strong>Kreuzk&uuml;mmelpulver</strong></td>
      </tr>
      <tr>
        <td class="td-qty">1/4 Tl</td>
        <td><strong>Korianderpulver</strong></td>
      </tr>
      <tr>
        <td class="td-qty">1/2 Tl</td>
        <td><strong>Zucker</strong></td>
      </tr>
      <tr>
        <td class="td-qty">1/4 Tl</td>
        <td><strong>Chilipulver</strong></td>
      </tr>
      <tr>
        <td class="td-qty">1 kleine Dose</td>
        <td>gehackte <strong>Tomaten</strong> ca. 200g</td>
      </tr>
      <tr>
        <td class="td-qty">4 dl</td>
        <td><strong>Wasser</strong></td>
      </tr>
      <tr>
        <td class="td-qty">200 g</td>
        <td><strong>rote Linsen</strong></td>
      </tr>
      <tr>
        <td class="td-qty">1/2 El</td>
        <td><strong>Koriander-</strong> oder Petersilienbl&auml;ttchen, fein gehackt</td>
      </tr>
      <tr>
        <td class="td-qty">1 Tl</td>
        <td><strong>Garam Masala</strong></td>
      </tr>
      <tr>
        <td class="td-qty"></td>
        <td><strong>Salz</strong>, nach Bedarf</td>
      </tr>
      <tr>
        <td class="td-qty">einige</td>
        <td><strong>Koriander-</strong> oder Petersilienbl&auml;ttchen zum garnieren</td>
      </tr>
    </tbody>
  </table>

  <h2>Zubereitung:</h2>
  <p>Vor- und zubereiten: 30 Minuten</p>
  <p>Zwiebel fein hacken und Knoblauch pressen.</p>
  <p>Bratbutter warm werden lassen. Knoblauch und Zwiebel and&auml;mpfen</p>
  <p>Kurkuma und alle Zutaten bis und mit Chilipulver kurz mitd&auml;mpfen, Tomaten und Wasser
    dazugiessen, aufkochen. Hitze reduzieren, Linsen beigeben, zugedeckt ca. 15 Minuten
    weich k&ouml;cheln.</p>
  <p>Koriander und Garam Masala darunter mischen, Daal salzen, anrichten, garnieren.</p>

  <p><strong>Passt zu:</strong> <a href="Rcp017.htm">Kokos-Fischcurry</a>, <a href="Rcp024.htm">Tandoori-Chicken</a></p>

  <h2>Kalorien:</h2>
  <p>Pro Person: 4g Fett, 15g Eiweiss, 32g Kohlenhydrate, 930 kJ, 222kcal</p>

  <h2>Quelle:</h2>
  <p>Betty Bossi Zeitung 01/2005 S.11</p>

  <h2>Bewertung:</h2>
  <p>Schmeckte am 22.4.2007 ausgezeichnet.</p>

<p CLASS='linkback'>
    <a href='https://richardeigenmann.github.io/RezeptsammlungNg' target='_parent'>
    Richi's Rezeptsammlung
    </a>
</p>
<label>
    <input type="checkbox" id="wakeLockToggle" checked>
    Wake Lock to prevent screen timeout
</label>
    
<!-- Google Tag Manager -->
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
  new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
  j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
  'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
  })(window,document,'script','dataLayer','GTM-PHL53P');</script>
  <!-- End Google Tag Manager -->
<!-- Google Tag Manager (noscript) -->
<noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-PHL53P" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
<!-- End Google Tag Manager (noscript) -->

<script>
  // Function to request a wake lock
  async function requestWakeLock() {
      try {
        wakeLock = await navigator.wakeLock.request('screen');
        //statusText.innerHTML = 'Wake Lock is currently <strong>active</strong>.';

        // Listen for wake lock being released
        wakeLock.addEventListener('release', () => {
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        wakeLockToggle.checked = false; // Update checkbox state
        });

        console.log('Wake Lock activated.');
      } catch (err) {
        console.error(`Failed to acquire wake lock: ${err.message}`);
      }
    }

  // Function to release the wake lock
  function releaseWakeLock() {
      if (wakeLock) {
        wakeLock.release();
        wakeLock = null;
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        console.log('Wake Lock released.');
      }
    }

  // Initialize wake lock on page load
  async function initializeWakeLock() {
      if ('wakeLock' in navigator) {
          await requestWakeLock(); // Enable wake lock by default
      } else {
        //statusText.innerHTML = 'Wake Lock is <strong>not supported</strong> by your browser.';
      }
  }

    // Event listener for the checkbox
    wakeLockToggle.addEventListener('change', () => {
      if (wakeLockToggle.checked) {
    requestWakeLock();
      } else {
    releaseWakeLock();
      }
    });

    // Handle page visibility change
    document.addEventListener('visibilitychange', () => {
      if (wakeLock && document.visibilityState === 'hidden') {
    releaseWakeLock(); // Automatically release wake lock when page is hidden
  wakeLockToggle.checked = false; // Update checkbox state
      }
    });

  // Enable wake lock by default when the page loads
  window.addEventListener('load', initializeWakeLock);
</script>
</body>

</html>