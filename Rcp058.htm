<!DOCTYPE HTML>
<html>

<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>Antipasti all'estate lucchese</title>
	<link rel="StyleSheet" href="rcp.css" type="text/css" media="screen">
	<meta name="RCP-Speise-Kategorie" content="Vorspeisen">
	<meta name="RCP-Speise-Kategorie" content="Ap&eacute;roh&auml;ppchen">
	<meta name="RCP-Region" content="Italienisch">
	<meta name="RCP-Zutat" content="Feigen">
	<meta name="RCP-Zutat" content="Honigmelonen">
	<meta name="RCP-Zutat" content="Parmaschinken">
	<meta name="RCP-Zutat" content="Salami">
	<meta name="RCP-Zutat" content="Marsala">
	<meta name="RCP-Bewertung" content="4 Sterne">
	<meta name="RCP-Quelle" content="Werbebrosch&uuml;re">
</head>

<body>
	<h1>Antipasti all'estate lucchese</h1>
	<img src="Rcp058.jpg" alt="Antipasti all'estate lucchese" width="400" height="266">

	<table>
		<tbody>
			<tr>
				<td colspan="2">
					<strong>Zutaten f&uuml;r 4 Personen:</strong>
				</td>
			</tr>
			<tr>
				<td class="td-qty">2</td>
				<td><strong>frische Feigen</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1/2</td>
				<td><strong>Honigmelone</strong></td>
			</tr>
			<tr>
				<td class="td-qty">150 g</td>
				<td><strong>hauchd&uuml;nn geschnittener Parmaschinken</strong></td>
			</tr>
			<tr>
				<td class="td-qty">50 g</td>
				<td><strong>Pfeffersalami Nostrano</strong></td>
			</tr>
			<tr>
				<td class="td-qty"></td>
				<td><strong>gemahlener Pfeffer</strong></td>
			</tr>
		</tbody>
	</table>

	<h2>Zubereitung:</h2>
	<p>Melone entkernen und in Schnitze schneiden. Feigen vierteln. Teller abwechslungsweise mit Parmaschinken/Melone
		und Salami/Feigen auslegen. Mit frisch gemahlenem Pfeffer bestreuen. Melone nach belieben mit Marsala
		betr&auml;ufeln</p>

	<h2>Quelle:</h2>
	<p>Flugblatt eines Spezialit&auml;tenladens.</p>

	<h2>Bewertung:</h2>
	<p>Schmeckte mir am 29.6.2008 ausgezeichnet. RE.</p>

<p CLASS='linkback'>
    <a href='https://richardeigenmann.github.io/RezeptsammlungNg' target='_parent'>
    Richi's Rezeptsammlung
    </a>
</p>
<label>
    <input type="checkbox" id="wakeLockToggle" checked>
    Wake Lock to prevent screen timeout
</label>
    
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-47341387-3', 'auto');
  ga('send', 'pageview');

    let wakeLock = null; // Variable to hold the wake lock instance
    const statusText = document.getElementById('status');
    const wakeLockToggle = document.getElementById('wakeLockToggle');

    // Function to request a wake lock
    async function requestWakeLock() {
      try {
        wakeLock = await navigator.wakeLock.request('screen');
        //statusText.innerHTML = 'Wake Lock is currently <strong>active</strong>.';

        // Listen for wake lock being released
        wakeLock.addEventListener('release', () => {
          //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
          wakeLockToggle.checked = false; // Update checkbox state
        });

        console.log('Wake Lock activated.');
      } catch (err) {
        console.error(`Failed to acquire wake lock: ${err.message}`);
      }
    }

    // Function to release the wake lock
    function releaseWakeLock() {
      if (wakeLock) {
        wakeLock.release();
        wakeLock = null;
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        console.log('Wake Lock released.');
      }
    }

    // Initialize wake lock on page load
    async function initializeWakeLock() {
      if ('wakeLock' in navigator) {
        await requestWakeLock(); // Enable wake lock by default
      } else {
        //statusText.innerHTML = 'Wake Lock is <strong>not supported</strong> by your browser.';
      }
    }

    // Event listener for the checkbox
    wakeLockToggle.addEventListener('change', () => {
      if (wakeLockToggle.checked) {
        requestWakeLock();
      } else {
        releaseWakeLock();
      }
    });

    // Handle page visibility change
    document.addEventListener('visibilitychange', () => {
      if (wakeLock && document.visibilityState === 'hidden') {
        releaseWakeLock(); // Automatically release wake lock when page is hidden
        wakeLockToggle.checked = false; // Update checkbox state
      }
    });

    // Enable wake lock by default when the page loads
    window.addEventListener('load', initializeWakeLock);
</script>
</body>

</html>