<!DOCTYPE HTML>
<html>

<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>Zopf-Hasen</title>
	<link rel="StyleSheet" href="rcp.css" type="text/css" media="screen">
	<meta name="RCP-Speise-Kategorie" content="Brote">
	<meta name="RCP-Speise-Kategorie" content="Aus dem Ofen">
	<meta name="RCP-Speise-Kategorie" content="Vegetarisch">
	<meta name="RCP-Zutat" content="Zopfmehl">
	<meta name="RCP-Zutat" content="Hefe">
	<meta name="RCP-Zutat" content="Milch">
	<meta name="RCP-Zutat" content="Zucker">
	<meta name="RCP-Zutat" content="Butter">
	<meta name="RCP-Zutat" content="Eier">
	<meta name="RCP-Bewertung" content="4 Sterne">
	<meta name="RCP-Quelle" content="Sandra Keller">
</head>

<body>
	<h1>Zopf-Hasen</h1>
	<img src="Rcp355.jpg" alt="Zopf-Hasen" width="400" height="342">

	<table>
		<tbody>
			<tr>
				<td colspan="2"><strong>Zutaten f&uuml;r 4 Hasen:</strong></td>
			</tr>
			<tr>
				<td class="td-qty">500 g</td>
				<td><strong>Zopfmehl</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1 Beutel</td>
				<td><strong>Trockenhefe</strong></td>
			</tr>
			<tr>
				<td class="td-qty">3 dl</td>
				<td><strong>Milch</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1.5 Tl = 10 g</td>
				<td><strong>Salz</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1 Tl = 10 g</td>
				<td><strong>Zucker</strong></td>
			</tr>
			<tr>
				<td class="td-qty">50 g</td>
				<td>weiche <strong>Butter</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1</td>
				<td><strong>Eigelb</strong></td>
			</tr>
		</tbody>
	</table>

	<h2>Zubereitung:</h2>
	<p>Alle Zutaten zu einem Teig kneten.</p>
	<p>Teig in zugedeckter Sch&uuml;ssel w&auml;hrend ca. 1 Stunde an einem warmen Ort gehen lassen.</p>
	<p>Teig in 4 Teile schneiden und jedes zu einem Hasen formen.</p>
	<p>Hasen auf das Backblech legen und nochmals 40 Minuten aufgehen lassen.</p>
	<p>Den Ofen auf 220&deg;C vorheizen.</p>
	<p>Die Hasen mit Eigelb bestreichen.</p>
	<p>Auf der zweituntersten Rille im Ofen w&auml;hrend 20-25 Minuten backen.</p>

	<h2>Tipp:</h2>
	<p>Der Teig l&auml;sst sich auch zu anderen Tieren formen. Zum Beispiel Schildkr&ouml;ten (oder &uuml;bergrosse
		Zecken??), Schnecken etc.</p>

	<h2>Quelle:</h2>
	<p>Sandra hat die Idee in einer B&auml;ckerei aufgeschnappt und gleich umgesetzt.</p>

	<h2>Bewertung:</h2>
	<p>Eine h&uuml;bsche Abwandlung des Grytib&auml;nz f&uuml;r Ostern. RE April 2013</p>


<p CLASS='linkback'>
    <a href='https:\/\/richardeigenmann.github.io\/RezeptsammlungNg' target='_parent'>
    Richi's Rezeptsammlung
    </a>
</p>
<label>
    <input type="checkbox" id="wakeLockToggle" checked>
    Wake Lock to prevent screen timeout
</label>
    <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-47341387-3', 'auto');
  ga('send', 'pageview');

    let wakeLock = null; // Variable to hold the wake lock instance
    const statusText = document.getElementById('status');
    const wakeLockToggle = document.getElementById('wakeLockToggle');

    // Function to request a wake lock
    async function requestWakeLock() {
      try {
        wakeLock = await navigator.wakeLock.request('screen');
        //statusText.innerHTML = 'Wake Lock is currently <strong>active</strong>.';

        // Listen for wake lock being released
        wakeLock.addEventListener('release', () => {
          //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
          wakeLockToggle.checked = false; // Update checkbox state
        });

        console.log('Wake Lock activated.');
      } catch (err) {
        console.error(`Failed to acquire wake lock: ${err.message}`);
      }
    }

    // Function to release the wake lock
    function releaseWakeLock() {
      if (wakeLock) {
        wakeLock.release();
        wakeLock = null;
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        console.log('Wake Lock released.');
      }
    }

    // Initialize wake lock on page load
    async function initializeWakeLock() {
      if ('wakeLock' in navigator) {
        await requestWakeLock(); // Enable wake lock by default
      } else {
        //statusText.innerHTML = 'Wake Lock is <strong>not supported</strong> by your browser.';
      }
    }

    // Event listener for the checkbox
    wakeLockToggle.addEventListener('change', () => {
      if (wakeLockToggle.checked) {
        requestWakeLock();
      } else {
        releaseWakeLock();
      }
    });

    // Handle page visibility change
    document.addEventListener('visibilitychange', () => {
      if (wakeLock && document.visibilityState === 'hidden') {
        releaseWakeLock(); // Automatically release wake lock when page is hidden
        wakeLockToggle.checked = false; // Update checkbox state
      }
    });

    // Enable wake lock by default when the page loads
    window.addEventListener('load', initializeWakeLock);
</script>
</body>

</html>