<!DOCTYPE HTML>
<html>

<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Thon Terrine</title>
  <link rel="StyleSheet" href="rcp.css" type="text/css" media="screen">
  <meta name="RCP-Speise-Kategorie" content="Terrinen">
  <meta name="RCP-Zutat" content="Thunfisch">
  <meta name="RCP-Zutat" content="Peperoni">
  <meta name="RCP-Zutat" content="Fr&uuml;hlingszwiebeln">
  <meta name="RCP-Zutat" content="Gurken">
  <meta name="RCP-Zutat" content="Tomatenpur&eacute;e">
  <meta name="RCP-Zutat" content="Worcestershiresauce">
  <meta name="RCP-Zutat" content="Zitronensaft">
  <meta name="RCP-Bewertung" content="3 Sterne">
  <meta name="RCP-Quelle" content="Herbert Eigenmann">
</head>

<body>
  <h1>Thon Terrine</h1>
  <img src="Rcp044.jpg" alt="Thon Terrine" width="450" height="266">

  <table>
    <tbody>
      <tr>
        <td colspan="2">
          <strong>Zutaten</strong>
        </td>
      </tr>
      <tr>
        <td class="td-qty">200 g</td>
        <td><strong>Thunfisch in Dosen</strong></td>
      </tr>
      <tr>
        <td class="td-qty">2</td>
        <td><strong>Eier</strong></td>
      </tr>
      <tr>
        <td class="td-qty">1</td>
        <td><strong>Rote Peperoni</strong></td>
      </tr>
      <tr>
        <td class="td-qty">4</td>
        <td><strong>Fr&uuml;hlingszwiebeln</strong></td>
      </tr>
      <tr>
        <td class="td-qty">5 cm</td>
        <td><strong>Gurke</strong></td>
      </tr>
      <tr>
        <td class="td-qty">1 EL</td>
        <td><strong>Tomatenpur&eacute;e</strong></td>
      </tr>
      <tr>
        <td class="td-qty">2 EL</td>
        <td><strong>Worcestershire-Sauce</strong></td>
      </tr>
      <tr>
        <td class="td-qty">2 EL</td>
        <td><strong>Zitronensaft</strong></td>
      </tr>
      <tr>
        <td class="td-qty"></td>
        <td><strong>Salz, Pfeffer</strong></td>
      </tr>
    </tbody>
  </table>


  <h2>Zubereitung:</h2>
  <p>Peperoni, Fr&uuml;hlingszwiebeln und Gurke fein schneiden und in eine Sch&uuml;ssel geben.</p>
  <p>Thunfisch ohne &Ouml;l oder Salzlake zerzupfen und beigeben.</p>
  <p>Hart gekochte Eier fein schneiden und zugeben.</p>
  <p>Mit Zitronensaft und Worcestershire-Sauce, Salz und Pfeffer abschmecken.</p>
  <p>Gut mischen.</p>
  <p>Die Mischung gut in eine passende Form dr&uuml;cken und 2 Stunden k&uuml;hl stellen.</p>
  <p>Herausheben und in dicken Tranchen servieren. Mit Gurken und Zitrone verzieren.</p>

  <h2>Quelle:</h2>
  <p>Herbert Eigenmann, Code: TLF</p>

  <h2>Bewertung:</h2>
  <p>So eine nette Art Thon-Gem&uuml;se Salat. RE, 19.10.2004</p>

<p CLASS='linkback'>
    <a href='https://richardeigenmann.github.io/RezeptsammlungNg' target='_parent'>
    Richi's Rezeptsammlung
    </a>
</p>
<label>
    <input type="checkbox" id="wakeLockToggle" checked>
    Wake Lock to prevent screen timeout
</label>
    
<script async src="https://www.googletagmanager.com/gtag/js?id=G-XWT8EWS5BN"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-XWT8EWS5BN');
  // Function to request a wake lock
  async function requestWakeLock() {
      try {
        wakeLock = await navigator.wakeLock.request('screen');
        //statusText.innerHTML = 'Wake Lock is currently <strong>active</strong>.';

        // Listen for wake lock being released
        wakeLock.addEventListener('release', () => {
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        wakeLockToggle.checked = false; // Update checkbox state
        });

        console.log('Wake Lock activated.');
      } catch (err) {
        console.error(`Failed to acquire wake lock: ${err.message}`);
      }
    }

  // Function to release the wake lock
  function releaseWakeLock() {
      if (wakeLock) {
        wakeLock.release();
        wakeLock = null;
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        console.log('Wake Lock released.');
      }
    }

  // Initialize wake lock on page load
  async function initializeWakeLock() {
      if ('wakeLock' in navigator) {
          await requestWakeLock(); // Enable wake lock by default
      } else {
        //statusText.innerHTML = 'Wake Lock is <strong>not supported</strong> by your browser.';
      }
  }

    // Event listener for the checkbox
    wakeLockToggle.addEventListener('change', () => {
      if (wakeLockToggle.checked) {
    requestWakeLock();
      } else {
    releaseWakeLock();
      }
    });

    // Handle page visibility change
    document.addEventListener('visibilitychange', () => {
      if (wakeLock && document.visibilityState === 'hidden') {
    releaseWakeLock(); // Automatically release wake lock when page is hidden
  wakeLockToggle.checked = false; // Update checkbox state
      }
    });

  // Enable wake lock by default when the page loads
  window.addEventListener('load', initializeWakeLock);
</script>

</body>

</html>