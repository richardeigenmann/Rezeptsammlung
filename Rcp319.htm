<!DOCTYPE HTML>
<html>

<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>Spinat-W&auml;he</title>
	<link rel="StyleSheet" href="rcp.css" type="text/css" media="screen">
	<meta name="RCP-Speise-Kategorie" content="Aus dem Ofen">
	<meta name="RCP-Speise-Kategorie" content="Vegetarisch">
	<meta name="RCP-Speise-Kategorie" content="W&auml;hen">
	<meta name="RCP-Region" content="Schweizerisch">
	<meta name="RCP-Zutat" content="Kuchenteig">
	<meta name="RCP-Kochwerkzeug" content="Kuchenblech 28cm">
	<meta name="RCP-Zutat" content="Parmesan">
	<meta name="RCP-Zutat" content="Zwiebeln">
	<meta name="RCP-Zutat" content="Blattspinat">
	<meta name="RCP-Zutat" content="Halbrahm">
	<meta name="RCP-Zutat" content="Gorgonzola">
	<meta name="RCP-Zutat" content="Mehl">
	<meta name="RCP-Zutat" content="Eier">
	<meta name="RCP-Bewertung" content="4 Sterne">
	<meta name="RCP-Quelle" content="Herbert Eigenmann">
</head>

<body>
	<h1>Spinat-W&auml;he</h1>
	<img src="Rcp319.jpg" alt="Spinat-W&auml;he" width="400" height="243">

	<table>
		<tbody>
			<tr>
				<td colspan="2"><strong>Zutaten f&uuml;r 4 Personen:</strong></td>
			</tr>
			<tr>
				<td class="td-qty"></td>
				<td><strong>Kuchenteig </strong>28cm Durchmesser</td>
			</tr>
			<tr>
				<td class="td-qty">3 EL</td>
				<td>geriebener <strong>Parmesan</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1</td>
				<td><strong>Zwiebel</strong></td>
			</tr>
			<tr>
				<td class="td-qty">500g</td>
				<td>frischer <strong>Blattspinat</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1 dl</td>
				<td><strong>Halbrahm</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1 El</td>
				<td><strong>Mehl</strong></td>
			</tr>
			<tr>
				<td class="td-qty">2</td>
				<td><strong>Eier</strong></td>
			</tr>
			<tr>
				<td class="td-qty"></td>
				<td><strong>Muskat</strong></td>
			</tr>
			<tr>
				<td class="td-qty">100g</td>
				<td><strong>Gorgonzola</strong></td>
			</tr>
		</tbody>
	</table>

	<h2>Zubereitung:</h2>
	<p>Teig mit dem Papier ins Blech legen, mit einer Gabel dicht einstechen. Mit 3 Essl&ouml;ffeln geriebenem Parmesan
		bestreuen und k&uuml;hl stellen.</p>
	<p>F&uuml;r die F&uuml;llung 1 grosse Zwiebel fein hacken.</p>
	<p>500 g frischen Blattspinat grob hacken.</p>
	<p>100g Gorgonzola in W&uuml;rfel schneiden.</p>
	<p>Zwiebeln in wenig warmer Butter ca. 3 Minuten and&auml;mpfen.</p>
	<p>Spinat beigeben und zugedeckt nur zusammenfallen lassen. Danach abk&uuml;hlen lassen.</p>
	<p>1dl Halbrahm, 1 El Mehl und 2 Eier verr&uuml;hren. Mit 1/2 TL Salz, wenig Pfeffer und Muskat w&uuml;rzen und mit
		dem Spinat mischen.</p>
	<p>Gorgonzola darunter mischen, auf dem vorbereiteten Teigboden verteilen.</p>
	<p>35 Minuten in der unteren H&auml;lfte des auf 220&deg;C (Umluft 200&deg;C) vorgeheizten Ofens backen.</p>

	<h2>Quelle:</h2>
	<p>Ein Rezept das Herbert irgendwo aufgetrieben hat.</p>

	<h2>Bewertung:</h2>
	<p>Im Juli bei Herbert sehr schmackhaft.</p>
	<p>Hat am 15.7.2009 auch bei mir toll geschmeckt. RE</p>

<p CLASS='linkback'>
    <a href='https://richardeigenmann.github.io/RezeptsammlungNg' target='_parent'>
    Richi's Rezeptsammlung
    </a>
</p>
<label>
    <input type="checkbox" id="wakeLockToggle" checked>
    Wake Lock to prevent screen timeout
</label>
    
<script async src="https://www.googletagmanager.com/gtag/js?id=G-XWT8EWS5BN"></script>
<script>
  // Function to request a wake lock
  async function requestWakeLock() {
      try {
        wakeLock = await navigator.wakeLock.request('screen');
        //statusText.innerHTML = 'Wake Lock is currently <strong>active</strong>.';

        // Listen for wake lock being released
        wakeLock.addEventListener('release', () => {
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        wakeLockToggle.checked = false; // Update checkbox state
        });

        console.log('Wake Lock activated.');
      } catch (err) {
        console.error(`Failed to acquire wake lock: ${err.message}`);
      }
    }

  // Function to release the wake lock
  function releaseWakeLock() {
      if (wakeLock) {
        wakeLock.release();
        wakeLock = null;
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        console.log('Wake Lock released.');
      }
    }

  // Initialize wake lock on page load
  async function initializeWakeLock() {
      if ('wakeLock' in navigator) {
          await requestWakeLock(); // Enable wake lock by default
      } else {
        //statusText.innerHTML = 'Wake Lock is <strong>not supported</strong> by your browser.';
      }
  }

    // Event listener for the checkbox
    wakeLockToggle.addEventListener('change', () => {
      if (wakeLockToggle.checked) {
    requestWakeLock();
      } else {
    releaseWakeLock();
      }
    });

    // Handle page visibility change
    document.addEventListener('visibilitychange', () => {
      if (wakeLock && document.visibilityState === 'hidden') {
    releaseWakeLock(); // Automatically release wake lock when page is hidden
  wakeLockToggle.checked = false; // Update checkbox state
      }
    });

  // Enable wake lock by default when the page loads
  window.addEventListener('load', initializeWakeLock);
</script>
</body>

</html>