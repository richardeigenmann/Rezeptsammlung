<!DOCTYPE HTML>
<html>

<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>Cro&ucirc;tes aux pommes</title>
	<link rel="StyleSheet" href="rcp.css" type="text/css" media="screen">
	<meta name="RCP-Speise-Kategorie" content="Aus dem Ofen">
	<meta name="RCP-Speise-Kategorie" content="Vegetarisch">
	<meta name="RCP-Speise-Kategorie" content="Desserts">
	<meta name="RCP-Zutat" content="&Auml;pfel">
	<meta name="RCP-Zutat" content="Rahm">
	<meta name="RCP-Zutat" content="Calvados">
	<meta name="RCP-Zutat" content="Zucker">
	<meta name="RCP-Zutat" content="Vanille-Extrakt">
	<meta name="RCP-Zutat" content="Zopfbrot">
	<meta name="RCP-Zutat" content="Butter">
	<meta name="RCP-Zutat" content="Apfelgel&eacute;e">
	<meta name="RCP-Bewertung" content="2 Sterne">
	<meta name="RCP-Quelle" content="Herbert Eigenmann">
</head>

<body>
	<h1>Cro&ucirc;tes aux pommes</h1>
	<img src="Rcp256.jpg" alt="Cro&ucirc;tes aux pommes" width="400" height="305">

	<table>
		<tbody>
			<tr>
				<td colspan="2"><strong>Zutaten f&uuml;r 4 Personen:</strong></td>
			</tr>
			<tr>
				<td class="td-qty">4</td>
				<td><strong>&Auml;pfel (Sorte, die nicht verkocht)</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1 dl</td>
				<td><strong>Rahm</strong></td>
			</tr>
			<tr>
				<td class="td-qty">2 EL</td>
				<td><strong>Calvados</strong></td>
			</tr>
			<tr>
				<td class="td-qty">2 EL</td>
				<td><strong>Zucker oder</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1 TL</td>
				<td><strong>Assugrin</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1/2 TL</td>
				<td><strong>Vanille-Extrakt</strong></td>
			</tr>
			<tr>
				<td class="td-qty">4</td>
				<td><strong>grosse Scheiben Zopfbrot (kann vom Vortag sein)</strong></td>
			</tr>
			<tr>
				<td class="td-qty"></td>
				<td><strong>Kochbutter</strong></td>
			</tr>
			<tr>
				<td class="td-qty">3</td>
				<td><strong>Apfel- Quitten- oder Johannisbeergel&eacute;e</strong></td>
			</tr>
		</tbody>
	</table>

	<h2>Zubereitung:</h2>
	<p>Zubereitungszeit: 15 Minuten
		<br>Backzeit: 15-20 Minuten</p>
	<p>&Auml;pfel sch&auml;len, halbieren, Kerngeh&auml;use entfernen. Jede H&auml;lfte in 6 Schnitze teilen.</p>
	<p>Rahm, Calvados, Zucker oder Assugrin und Vanille-Extrakt mischen. In ein flaches Gef&auml;ss giessen. Die
		Zopfscheiben hineinlegen und mit der Mischung gut durchtr&auml;nken.</p>
	<p>Butter erhitzen, die Apfel-Schnitze hineingeben und unter Wenden darin knapp weich braten. Sie d&uuml;rfen leicht
		karamelisieren.</p>
	<p>Die getr&auml;nkten Zopfscheiben in eine feuerfeste Form legen. Mit gebratenen &Auml;pfeln belegen (man braucht
		sie nicht sch&ouml;n anzuordnen. Im Gegenteil, es sieht sch&ouml;ner aus, wenn sie unregelm&auml;ssig
		daraufgelegt werden).</p>
	<p>Den Gel&eacute;e mit einer Gabel zerdr&uuml;cken. Auf die &Auml;pfel-Schnitten verteilen. Den von den
		Zopfscheiben nicht aufgesogenen Rahm &uuml;ber die &Auml;pfel verteilen.</p>
	<p>Im Backofen bei 22O&deg;C 15-20 Minuten &uuml;berbacken. Die &Auml;pfel d&uuml;rfen Farbe annehmen und sollten
		etwas aufgehen. Heiss in der Form servieren. Man kann die Schnitten auch in Portionenformen backen.</p>

	<h2>Kalorien:</h2>
	<p>Pro Person: 449 Kalorien, 1885 Joule</p>

	<h2>Quelle:</h2>
	<p>Herbert Eigenmann, Code: AAU</p>

	<h2>Bewertung:</h2>
	<p>Nicht f&uuml;r Sandra machen Apfel und Assugrin. W&auml;&auml;h!</p>
	<p>War am 28.4.2010 nichts besonderes. Sehr s&uuml;ss. OK, aber die Socken blieben an den F&uuml;ssen. RE</p>

<p CLASS='linkback'>
    <a href='https://richardeigenmann.github.io/RezeptsammlungNg' target='_parent'>
    Richi's Rezeptsammlung
    </a>
</p>
<label>
    <input type="checkbox" id="wakeLockToggle" checked>
    Wake Lock to prevent screen timeout
</label>
    
<!-- Google Tag Manager -->
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
  new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
  j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
  'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
  })(window,document,'script','dataLayer','GTM-PHL53P');</script>
  <!-- End Google Tag Manager -->
<!-- Google Tag Manager (noscript) -->
<noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-PHL53P" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
<!-- End Google Tag Manager (noscript) -->

<script>
  // Function to request a wake lock
  async function requestWakeLock() {
      try {
        wakeLock = await navigator.wakeLock.request('screen');
        //statusText.innerHTML = 'Wake Lock is currently <strong>active</strong>.';

        // Listen for wake lock being released
        wakeLock.addEventListener('release', () => {
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        wakeLockToggle.checked = false; // Update checkbox state
        });

        console.log('Wake Lock activated.');
      } catch (err) {
        console.error(`Failed to acquire wake lock: ${err.message}`);
      }
    }

  // Function to release the wake lock
  function releaseWakeLock() {
      if (wakeLock) {
        wakeLock.release();
        wakeLock = null;
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        console.log('Wake Lock released.');
      }
    }

  // Initialize wake lock on page load
  async function initializeWakeLock() {
      if ('wakeLock' in navigator) {
          await requestWakeLock(); // Enable wake lock by default
      } else {
        //statusText.innerHTML = 'Wake Lock is <strong>not supported</strong> by your browser.';
      }
  }

    // Event listener for the checkbox
    wakeLockToggle.addEventListener('change', () => {
      if (wakeLockToggle.checked) {
    requestWakeLock();
      } else {
    releaseWakeLock();
      }
    });

    // Handle page visibility change
    document.addEventListener('visibilitychange', () => {
      if (wakeLock && document.visibilityState === 'hidden') {
    releaseWakeLock(); // Automatically release wake lock when page is hidden
  wakeLockToggle.checked = false; // Update checkbox state
      }
    });

  // Enable wake lock by default when the page loads
  window.addEventListener('load', initializeWakeLock);
</script>
</body>

</html>