<!DOCTYPE HTML>
<html>

<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>Apfeltschu</title>
	<link rel="StyleSheet" href="rcp.css" type="text/css" media="screen">
	<meta name="RCP-Speise-Kategorie" content="Aus dem Ofen">
	<meta name="RCP-Speise-Kategorie" content="Cakes">
	<meta name="RCP-Kochwerkzeug" content="Springform 22cm">
	<meta name="RCP-Zutat" content="Brot">
	<meta name="RCP-Zutat" content="Milch">
	<meta name="RCP-Zutat" content="&Auml;pfel">
	<meta name="RCP-Zutat" content="Eier">
	<meta name="RCP-Zutat" content="Butter">
	<meta name="RCP-Zutat" content="Zucker">
	<meta name="RCP-Zutat" content="Gemahlene Haseln&uuml;sse">
	<meta name="RCP-Zutat" content="Zimt">
	<meta name="RCP-Zutat" content="Paniermehl">
	<meta name="RCP-Bewertung" content="3 Sterne">
	<meta name="RCP-Quelle" content="Herbert Eigenmann">
<!-- Google Tag Manager -->
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
  new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
  j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
  'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
  })(window,document,'script','dataLayer','GTM-PHL53P');</script>
<!-- End Google Tag Manager -->
</head>
<body>
	<h1>Apfeltschu</h1>
	<img src="Rcp255.jpg" alt="Apfeltschu" width="400" height="310">

	<table>
		<tbody>
			<tr>
				<td colspan="2"><strong>Zutaten f&uuml;r 4 Personen:</strong></td>
			</tr>
			<tr>
				<td class="td-qty">150 g</td>
				<td><strong>Brot</strong></td>
			</tr>
			<tr>
				<td class="td-qty">2 dl</td>
				<td><strong>Milch</strong></td>
			</tr>
			<tr>
				<td class="td-qty">750 g</td>
				<td><strong>&Auml;pfel</strong></td>
			</tr>
			<tr>
				<td class="td-qty">3</td>
				<td><strong>Eier</strong></td>
			</tr>
			<tr>
				<td class="td-qty">50 g</td>
				<td><strong>Butter</strong> oder <strong>Margarine</strong></td>
			</tr>
			<tr>
				<td class="td-qty">100 g</td>
				<td><strong>Zucker</strong></td>
			</tr>
			<tr>
				<td class="td-qty">60 g</td>
				<td><strong>Haseln&uuml;sse gemahlen</strong></td>
			</tr>
			<tr>
				<td class="td-qty">TL</td>
				<td><strong>Zimt</strong></td>
			</tr>
			<tr>
				<td class="td-qty"></td>
				<td><strong>Paniermehl</strong></td>
			</tr>
		</tbody>
	</table>

	<h2>Zubereitung:</h2>
	<p>(Springform 22 cm &Oslash;)</p>
	<p>Form befetten und mit Paniermehl ausstreuen. Brot in 1 cm grosse W&uuml;rfelchen schneiden und mit heisser Milch
		&uuml;bergiessen.</p>
	<p>&Auml;pfel zur&uuml;sten und fein schneiden.</p>
	<p>Eier Teilen. Eigelb, Butter und Zucker schaumig r&uuml;hren. Eiweiss zu Schnee schlagen.</p>
	<p>Brot fein zerstossen.</p>
	<p>Zutaten sorgf&auml;ltig mischen. Masse in die Form geben und 1 bis 1,25 Stunden im gut mittelheissen Ofen
		(200&deg;C) backen.</p>
	<p>Auf Zimmertemperatur gek&uuml;hlt servieren.</p>

	<h2>Tipp:</h2>
	<p>Statt mit Brot und 2 dl Milch kann der Apfeltschu auch mit einem Griessbrei aus 6 dl Milch, 90 g Griess, 1/4 TL
		Salz (ca. 15 Minuten kochen) zubereitet werden.</p>

	<h2>Quelle:</h2>
	<p>Herbert Eigenmann, Code: AAT</p>

	<h2>Bewertung:</h2>
	<p>Ganz nett. Erinnert stark an Apfelw&auml;he. RE 11.1.2009</p>

<p CLASS='linkback'>
    <a href='https://richardeigenmann.github.io/RezeptsammlungNg' target='_parent'>
    Richi's Rezeptsammlung
    </a>
</p>
<label>
    <input type="checkbox" id="wakeLockToggle" checked>
    Wake Lock to prevent screen timeout
</label>
    
<!-- Google Tag Manager (noscript) -->
<noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-PHL53P" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
<!-- End Google Tag Manager (noscript) -->

<script>
  // Function to request a wake lock
  async function requestWakeLock() {
      try {
        wakeLock = await navigator.wakeLock.request('screen');
        //statusText.innerHTML = 'Wake Lock is currently <strong>active</strong>.';

        // Listen for wake lock being released
        wakeLock.addEventListener('release', () => {
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        wakeLockToggle.checked = false; // Update checkbox state
        });

        console.log('Wake Lock activated.');
      } catch (err) {
        console.error(`Failed to acquire wake lock: ${err.message}`);
      }
    }

  // Function to release the wake lock
  function releaseWakeLock() {
      if (wakeLock) {
        wakeLock.release();
        wakeLock = null;
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        console.log('Wake Lock released.');
      }
    }

  // Initialize wake lock on page load
  async function initializeWakeLock() {
      if ('wakeLock' in navigator) {
          await requestWakeLock(); // Enable wake lock by default
      } else {
        //statusText.innerHTML = 'Wake Lock is <strong>not supported</strong> by your browser.';
      }
  }

    // Event listener for the checkbox
    wakeLockToggle.addEventListener('change', () => {
      if (wakeLockToggle.checked) {
    requestWakeLock();
      } else {
    releaseWakeLock();
      }
    });

    // Handle page visibility change
    document.addEventListener('visibilitychange', () => {
      if (wakeLock && document.visibilityState === 'hidden') {
    releaseWakeLock(); // Automatically release wake lock when page is hidden
  wakeLockToggle.checked = false; // Update checkbox state
      }
    });

  // Enable wake lock by default when the page loads
  window.addEventListener('load', initializeWakeLock);
</script>
</body>

</html>