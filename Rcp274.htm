<!DOCTYPE HTML>
<html>

<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>Lemon Sweep</title>
	<link rel="StyleSheet" href="rcp.css" type="text/css" media="screen">
	<meta name="RCP-Speise-Kategorie" content="Desserts">
	<meta name="RCP-Speise-Kategorie" content="Vegetarisch">
	<meta name="RCP-Zutat" content="Puderzucker">
	<meta name="RCP-Zutat" content="Zitronen">
	<meta name="RCP-Zutat" content="Madeira">
	<meta name="RCP-Zutat" content="Rahm">
	<meta name="RCP-Bewertung" content="3 Sterne">
	<meta name="RCP-Quelle" content="Herbert Eigenmann">
</head>

<body>
	<h1>Lemon Sweep</h1>
	<img src="Rcp274.jpg" alt="Lemon Sweep" width="400" height="368">

	<table>
		<tbody>
			<tr>
				<td colspan="2"><strong>Zutaten f&uuml;r 4 Personen:</strong></td>
			</tr>
			<tr>
				<td class="td-qty">150 g</td>
				<td><strong>Puderzucker</strong></td>
			</tr>
			<tr>
				<td class="td-qty">2</td>
				<td><strong>Zitronen</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1 Glas</td>
				<td><strong>Madeira</strong></td>
			</tr>
			<tr>
				<td class="td-qty">5dl</td>
				<td><strong>Rahm</strong></td>
			</tr>
		</tbody>
	</table>

	<h2>Zubereitung:</h2>
	<p>Von der einen Zitrone raspelt man die Schale dazu, von beiden nimmt man den Saft. Mit Puderzucker und Madeira
		mischen. Rahm steif schlagen und alles kr&auml;ftig zusammen r&uuml;hren, und zwar rasch, um einer Scheidung
		vorzubeugen. In Sch&uuml;ssel oder Form einf&uuml;llen und etwa 3 Stunden im Tiefk&uuml;hler fest werden lassen.
	</p>

	<h2>Quelle:</h2>
	<p>Herbert Eigenmann, Code: ZTS</p>

	<h2>Bewertung:</h2>
	<p>Am 31.1.02 in JNB zubereitet. War ganz schmackhaft.</p>

<p CLASS='linkback'>
    <a href='https://richardeigenmann.github.io/RezeptsammlungNg' target='_parent'>
    Richi's Rezeptsammlung
    </a>
</p>
<label>
    <input type="checkbox" id="wakeLockToggle" checked>
    Wake Lock to prevent screen timeout
</label>
    
<script async src="https://www.googletagmanager.com/gtag/js?id=G-XWT8EWS5BN"></script>
<script>
  // Function to request a wake lock
  async function requestWakeLock() {
      try {
        wakeLock = await navigator.wakeLock.request('screen');
        //statusText.innerHTML = 'Wake Lock is currently <strong>active</strong>.';

        // Listen for wake lock being released
        wakeLock.addEventListener('release', () => {
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        wakeLockToggle.checked = false; // Update checkbox state
        });

        console.log('Wake Lock activated.');
      } catch (err) {
        console.error(`Failed to acquire wake lock: ${err.message}`);
      }
    }

  // Function to release the wake lock
  function releaseWakeLock() {
      if (wakeLock) {
        wakeLock.release();
        wakeLock = null;
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        console.log('Wake Lock released.');
      }
    }

  // Initialize wake lock on page load
  async function initializeWakeLock() {
      if ('wakeLock' in navigator) {
          await requestWakeLock(); // Enable wake lock by default
      } else {
        //statusText.innerHTML = 'Wake Lock is <strong>not supported</strong> by your browser.';
      }
  }

    // Event listener for the checkbox
    wakeLockToggle.addEventListener('change', () => {
      if (wakeLockToggle.checked) {
    requestWakeLock();
      } else {
    releaseWakeLock();
      }
    });

    // Handle page visibility change
    document.addEventListener('visibilitychange', () => {
      if (wakeLock && document.visibilityState === 'hidden') {
    releaseWakeLock(); // Automatically release wake lock when page is hidden
  wakeLockToggle.checked = false; // Update checkbox state
      }
    });

  // Enable wake lock by default when the page loads
  window.addEventListener('load', initializeWakeLock);
</script>
</body>

</html>