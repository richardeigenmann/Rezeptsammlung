<!DOCTYPE HTML>
<html>

<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>Pizza</title>
	<link rel="StyleSheet" href="rcp.css" type="text/css" media="screen">
	<meta name="RCP-Speise-Kategorie" content="Aus dem Ofen">
	<meta name="RCP-Speise-Kategorie" content="Hauptgerichte">
	<meta name="RCP-Zutat" content="Schinken">
	<meta name="RCP-Zutat" content="Mozzarella">
	<meta name="RCP-Zutat" content="Zwiebeln">
	<meta name="RCP-Zutat" content="Italienische Kr&auml;utermischung">
	<meta name="RCP-Zutat" content="Knoblauch">
	<meta name="RCP-Zutat" content="Pelati">
	<meta name="RCP-Zutat" content="Tomatenpur&eacute;e">
	<meta name="RCP-Zutat" content="Thymian">
	<meta name="RCP-Zutat" content="Artischockenherzen">
	<meta name="RCP-Bewertung" content="4 Sterne">
	<meta name="RCP-Quelle" content="Betty Bossi">
</head>

<body>
	<h1>Pizza</h1>
	<img src="Rcp455.jpg" alt="Pizza" width="450" height="341">

	<table>
		<tbody>
			<tr>
				<td colspan="2"><strong>Zutaten f&uuml;r 4 Personen:</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1 Pack</td>
				<td><strong>Pizzateig</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1 Pack</td>
				<td><strong>Schinken in Scheiben</strong></td>
			</tr>
			<tr>
				<td class="td-qty">2</td>
				<td><strong>Mozzarella</strong>, an der R&ouml;stiraffel gerieben</td>
			</tr>
			<tr>
				<td class="td-qty"></td>
				<td><strong>Pfeffer</strong> aus der M&uuml;hle</td>
			</tr>
			<tr>
				<td class="td-qty">1 Tl</td>
				<td><strong>italienische Kr&auml;utermischung</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1 Dose </td>
				<td><strong>Artischockenherzen</strong> (ca. 400g) abgetropft, halbiert</td>
			</tr>
			<tr>
				<td class="td-qty">1 Glas </td>
				<td><strong>Oliven</strong></td>
			</tr>
			<tr>
				<td class="td-qty">wenig</td>
				<td><strong>Rucola Bl√§tter</strong></td>
			</tr>
			<tr>
				<td colspan="2"><strong>Tomatensauce</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1</td>
				<td><strong>Zwiebel</strong>, fein gehackt</td>
			</tr>
			<tr>
				<td class="td-qty">1</td>
				<td><strong>Knoblauchzehe, gepresst</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1</td>
				<td>Dose <strong>Pelati</strong> (ca. 400g)</td>
			</tr>
			<tr>
				<td class="td-qty">3 El</td>
				<td><strong>Tomatenp&uuml;ree</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1/2 Tl</td>
				<td><strong>Salz</strong></td>
			</tr>
			<tr>
				<td class="td-qty"></td>
				<td><strong>Pfeffer</strong> aus der M&uuml;hle</td>
			</tr>
			<tr>
				<td class="td-qty">1 Tl</td>
				<td><strong>Thymian</strong></td>
			</tr>

		</tbody>
	</table>

	<h2>Zubereitung:</h2>
	<p>F&uuml;r 1 Backblech von mindestens 30x33 cm oder f&uuml;r 4 runde Pizzas von ca. 20 cm Durchmesser.</p>
	
	<p>Den Teig auf dem Belch auslegen</p>

	<p><strong>Tomatensauce:</strong> &Ouml;l in einer Pfanne warm werden lassen. Zwiebeln, Knoblauch und Pelati
		beigeben, and&auml;mpfen. Tomatenp&uuml;ree darunter mischen. Auf kleinem Feuer ohne Deckel. ca. 30 Minuten
		kochen, w&uuml;rzen. Ausk&uuml;hlen, auf dem Teig verstreichen.</p>

	<p>Den Teig mit Sugo belegen und danach nach Lust und Laune die Pizza belegen.</p>

	<p>15 Minuten in der unteren H&auml;lfte des auf 220&deg;C vorgeheizten Ofens backen.</p>

	<p>Den Ruccola waschen und am Schluss &uuml;ber die Ofenwarme Pizza geben.</p>


	<h2>Quelle:</h2>
	<p>Von Betty Bossi Nr 6, 1992, Seite 8 abgewandelt</p>

	<h2>Bewertung:</h2>
	<p>Hat im September 2019 ausgezeichnet geschmeckt.</p>

<p CLASS='linkback'>
    <a href='https:\/\/richardeigenmann.github.io\/RezeptsammlungNg' target='_parent'>
    Richi's Rezeptsammlung
    </a>
</p>
<label>
    <input type="checkbox" id="wakeLockToggle" checked>
    Wake Lock to prevent screen timeout
</label>
    <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-47341387-3', 'auto');
  ga('send', 'pageview');

    let wakeLock = null; // Variable to hold the wake lock instance
    const statusText = document.getElementById('status');
    const wakeLockToggle = document.getElementById('wakeLockToggle');

    // Function to request a wake lock
    async function requestWakeLock() {
      try {
        wakeLock = await navigator.wakeLock.request('screen');
        //statusText.innerHTML = 'Wake Lock is currently <strong>active</strong>.';

        // Listen for wake lock being released
        wakeLock.addEventListener('release', () => {
          //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
          wakeLockToggle.checked = false; // Update checkbox state
        });

        console.log('Wake Lock activated.');
      } catch (err) {
        console.error(`Failed to acquire wake lock: ${err.message}`);
      }
    }

    // Function to release the wake lock
    function releaseWakeLock() {
      if (wakeLock) {
        wakeLock.release();
        wakeLock = null;
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        console.log('Wake Lock released.');
      }
    }

    // Initialize wake lock on page load
    async function initializeWakeLock() {
      if ('wakeLock' in navigator) {
        await requestWakeLock(); // Enable wake lock by default
      } else {
        //statusText.innerHTML = 'Wake Lock is <strong>not supported</strong> by your browser.';
      }
    }

    // Event listener for the checkbox
    wakeLockToggle.addEventListener('change', () => {
      if (wakeLockToggle.checked) {
        requestWakeLock();
      } else {
        releaseWakeLock();
      }
    });

    // Handle page visibility change
    document.addEventListener('visibilitychange', () => {
      if (wakeLock && document.visibilityState === 'hidden') {
        releaseWakeLock(); // Automatically release wake lock when page is hidden
        wakeLockToggle.checked = false; // Update checkbox state
      }
    });

    // Enable wake lock by default when the page loads
    window.addEventListener('load', initializeWakeLock);
</script>
</body>

</html>