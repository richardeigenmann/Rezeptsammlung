<!DOCTYPE HTML>
<html>

<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>Tirolercake</title>
	<link rel="StyleSheet" href="rcp.css" type="text/css" media="screen">
	<meta name="RCP-Speise-Kategorie" content="Cakes">
	<meta name="RCP-Speise-Kategorie" content="Vegetarisch">
	<meta name="RCP-Speise-Kategorie" content="Aus dem Ofen">
	<meta name="RCP-Speise-Kategorie" content="All time favorite">
	<meta name="RCP-Region" content="&Ouml;sterreichisch">
	<meta name="RCP-Zutat" content="Butter">
	<meta name="RCP-Zutat" content="Zucker">
	<meta name="RCP-Zutat" content="Eier">
	<meta name="RCP-Zutat" content="Gemahlene Mandeln">
	<meta name="RCP-Zutat" content="Schwarze Schokolade">
	<meta name="RCP-Zutat" content="Mehl">
	<meta name="RCP-Zutat" content="Backpulver">
	<meta name="RCP-Zutat" content="Kirsch">
	<meta name="RCP-Bewertung" content="4 Sterne">
	<meta name="RCP-Quelle" content="Sandra Antonilli">
</head>

<body>
	<h1>Tirolercake</h1>
	<img src="Rcp281.jpg" alt="Tirolercake" width="400" height="269">

	<table>
		<tbody>
			<tr>
				<td colspan="2"><strong>Zutaten f&uuml;r 4 Personen:</strong></td>
			</tr>
			<tr>
				<td class="td-qty">125 g</td>
				<td><strong>Butter</strong></td>
			</tr>
			<tr>
				<td class="td-qty">200 g</td>
				<td><strong>Zucker</strong></td>
			</tr>
			<tr>
				<td class="td-qty">5</td>
				<td><strong>Eier</strong></td>
			</tr>
			<tr>
				<td class="td-qty">125 g</td>
				<td><strong>gemahlene Mandeln</strong></td>
			</tr>
			<tr>
				<td class="td-qty">125 g</td>
				<td><strong>schwarze Schokolade</strong></td>
			</tr>
			<tr>
				<td class="td-qty">125 g</td>
				<td><strong>Mehl</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1/2 Pack</td>
				<td><strong>Backpulver</strong></td>
			</tr>
			<tr>
				<td class="td-qty">2 Essl&ouml;ffel</td>
				<td><strong>Kirsch</strong></td>
			</tr>
		</tbody>
	</table>

	<h2>Zubereitung:</h2>
	<p>Cakeform 30cm</p>
	<p>R&uuml;hrsch&uuml;ssel bereitstellen und Becher f&uuml;r den Eischnee.</p>
	<p>Die Eier trennen; die Eigelb in die R&uuml;hrsch&uuml;ssel geben, die Eiweiss in den Becher.</p>
	<p>Butter und Zucker zum Eigelb geben und schaumig r&uuml;hren.</p>
	<p>Mit dem Butterpapier die Cakeform ausschmieren oder mit Backpapier auskleiden</p>
	<p>Die Schokolade zu kleinen W&uuml;rfeln zerkleinern und dazugeben.</p>
	<p>Mehl, Mandeln, Backpulver und Kirsch darunter mischen.</p>
	<p>Die Eiweiss zu Schnee schlagen und sorgf&auml;ltig darunter ziehen.</p>
	<p>Bei 180&deg;C ca. 50 Minuten auf Unter- und Oberhitze backen.</p>
	<p>Mit einem St&auml;bchen pr&uuml;fen, ob Teig nicht mehr daran klebt.</p>

	<h2>Quelle:</h2>
	<p>Sandra Antonilli</p>

	<h2>Bewertung:</h2>
	<p>Bewertung: Absolute spitze und sehr einfach zu machen! RE, 20.4.2002</p>

<p CLASS='linkback'>
    <a href='https://richardeigenmann.github.io/RezeptsammlungNg' target='_parent'>
    Richi's Rezeptsammlung
    </a>
</p>
<label>
    <input type="checkbox" id="wakeLockToggle" checked>
    Wake Lock to prevent screen timeout
</label>
    
<script async src="https://www.googletagmanager.com/gtag/js?id=G-XWT8EWS5BN"></script>
<script>
  // Function to request a wake lock
  async function requestWakeLock() {
      try {
        wakeLock = await navigator.wakeLock.request('screen');
        //statusText.innerHTML = 'Wake Lock is currently <strong>active</strong>.';

        // Listen for wake lock being released
        wakeLock.addEventListener('release', () => {
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        wakeLockToggle.checked = false; // Update checkbox state
        });

        console.log('Wake Lock activated.');
      } catch (err) {
        console.error(`Failed to acquire wake lock: ${err.message}`);
      }
    }

  // Function to release the wake lock
  function releaseWakeLock() {
      if (wakeLock) {
        wakeLock.release();
        wakeLock = null;
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        console.log('Wake Lock released.');
      }
    }

  // Initialize wake lock on page load
  async function initializeWakeLock() {
      if ('wakeLock' in navigator) {
          await requestWakeLock(); // Enable wake lock by default
      } else {
        //statusText.innerHTML = 'Wake Lock is <strong>not supported</strong> by your browser.';
      }
  }

    // Event listener for the checkbox
    wakeLockToggle.addEventListener('change', () => {
      if (wakeLockToggle.checked) {
    requestWakeLock();
      } else {
    releaseWakeLock();
      }
    });

    // Handle page visibility change
    document.addEventListener('visibilitychange', () => {
      if (wakeLock && document.visibilityState === 'hidden') {
    releaseWakeLock(); // Automatically release wake lock when page is hidden
  wakeLockToggle.checked = false; // Update checkbox state
      }
    });

  // Enable wake lock by default when the page loads
  window.addEventListener('load', initializeWakeLock);
</script>
</body>

</html>