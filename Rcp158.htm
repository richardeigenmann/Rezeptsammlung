<!DOCTYPE HTML>
<html>

<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>Spanisches Gem&uuml;se</title>
	<link rel="StyleSheet" href="rcp.css" type="text/css" media="screen">
	<meta name="RCP-Speise-Kategorie" content="Vegetarisch">
	<meta name="RCP-Speise-Kategorie" content="Beilagen">
	<meta name="RCP-Region" content="Spanisch">
	<meta name="RCP-Zutat" content="Peperoni">
	<meta name="RCP-Zutat" content="Gurken">
	<meta name="RCP-Zutat" content="Tomaten">
	<meta name="RCP-Zutat" content="&Ouml;l">
	<meta name="RCP-Zutat" content="Knoblauch">
	<meta name="RCP-Zutat" content="Essig">
	<meta name="RCP-Bewertung" content="4 Sterne">
	<meta name="RCP-Quelle" content="Herbert Eigenmann">
<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-XWT8EWS5BN"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-XWT8EWS5BN');
</script>
<body>
	<h1>Spanisches Gem&uuml;se</h1>
	<img src="Rcp158.jpg" alt="Spanisches Gem&uuml;se" width="400" height="266">

	<table>
		<tbody>
			<tr>
				<td colspan="2">
					<strong>Zutaten f&uuml; 4 Personen:</strong>
				</td>
			</tr>
			<tr>
				<td class="td-qty">500 g</td>
				<td><strong>Peperoni</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1</td>
				<td><strong>Gurke</strong></td>
			</tr>
			<tr>
				<td class="td-qty">500 g</td>
				<td><strong>Tomaten</strong></td>
			</tr>
			<tr>
				<td class="td-qty"></td>
				<td><strong>&Ouml;l</strong></td>
			</tr>
			<tr>
				<td class="td-qty"></td>
				<td><strong>Knoblauch</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1 EL</td>
				<td><strong>Essig</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1 Prise</td>
				<td><strong>Zucker</strong></td>
			</tr>
		</tbody>
	</table>



	<h2>Mise en place:</h2>

	<p>Peperoni in St&uuml;cke schneiden, die Kerne und alles Weisse entfernen</p>
	<p>Gurke sch&auml;len, in dicke R&auml;dchen schneiden.</p>
	<p>Tomaten sch&auml;len, in Viertel schneiden.</p>
	<p>Essig mit Zucker verr&uuml;hren und Knoblauch dazu pressen.</p>

	<h2>Zubereitung:</h2>
	<p>Alles Gem&uuml;se in eine Pfanne legen. In &Ouml;l 20 Minuten d&uuml;nsten, nicht umr&uuml;hren, nur an der
		Pfanne r&uuml;tteln, so dass das Gem&uuml;se sch&ouml;n ganz bleibt.</p>
	<p>Zum Schluss eine durch die Presse gedr&uuml;ckte Knoblauchzehe, Essig und Zucker beif&uuml;gen, noch einige
		Minuten weiter kochen.</p>
	<p>Reis oder Kartoffelstock passen gut dazu.</p>

	<h2>Quelle:</h2>
	<p>Herbert Eigenmann, Code: SPG</p>

	<h2>Bewertung:</h2>
	<p>Schmeckte super gut. RE 2.3.2004</p>

<p CLASS='linkback'>
    <a href='https://richardeigenmann.github.io/RezeptsammlungNg' target='_parent'>
    Richi's Rezeptsammlung
    </a>
</p>
<label>
    <input type="checkbox" id="wakeLockToggle" checked>
    Wake Lock to prevent screen timeout
</label>
    
<!-- Google Tag Manager (noscript) -->
<noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-PHL53P" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
<!-- End Google Tag Manager (noscript) -->

<script>
  // Function to request a wake lock
  async function requestWakeLock() {
      try {
        wakeLock = await navigator.wakeLock.request('screen');
        //statusText.innerHTML = 'Wake Lock is currently <strong>active</strong>.';

        // Listen for wake lock being released
        wakeLock.addEventListener('release', () => {
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        wakeLockToggle.checked = false; // Update checkbox state
        });

        console.log('Wake Lock activated.');
      } catch (err) {
        console.error(`Failed to acquire wake lock: ${err.message}`);
      }
    }

  // Function to release the wake lock
  function releaseWakeLock() {
      if (wakeLock) {
        wakeLock.release();
        wakeLock = null;
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        console.log('Wake Lock released.');
      }
    }

  // Initialize wake lock on page load
  async function initializeWakeLock() {
      if ('wakeLock' in navigator) {
          await requestWakeLock(); // Enable wake lock by default
      } else {
        //statusText.innerHTML = 'Wake Lock is <strong>not supported</strong> by your browser.';
      }
  }

    // Event listener for the checkbox
    wakeLockToggle.addEventListener('change', () => {
      if (wakeLockToggle.checked) {
    requestWakeLock();
      } else {
    releaseWakeLock();
      }
    });

    // Handle page visibility change
    document.addEventListener('visibilitychange', () => {
      if (wakeLock && document.visibilityState === 'hidden') {
    releaseWakeLock(); // Automatically release wake lock when page is hidden
  wakeLockToggle.checked = false; // Update checkbox state
      }
    });

  // Enable wake lock by default when the page loads
  window.addEventListener('load', initializeWakeLock);
</script>
</body>

</html>