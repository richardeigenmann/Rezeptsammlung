<!DOCTYPE HTML>
<html>

<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>Karotten-Souffl&eacute; gekocht</title>
	<link rel="StyleSheet" href="rcp.css" type="text/css" media="screen">
	<meta name="RCP-Speise-Kategorie" content="Aus dem Ofen">
	<meta name="RCP-Speise-Kategorie" content="Vegetarisch">
	<meta name="RCP-Zutat" content="R&uuml;ebli">
	<meta name="RCP-Zutat" content="Margarine">
	<meta name="RCP-Zutat" content="Mehl">
	<meta name="RCP-Zutat" content="Milch">
	<meta name="RCP-Zutat" content="Muskatnuss">
	<meta name="RCP-Zutat" content="Eier">
	<meta name="RCP-Bewertung" content="3 Sterne">
	<meta name="RCP-Quelle" content="Herbert Eigenmann">
</head>

<body>
	<h1>Karotten-Souffl&eacute; gekocht</h1>
	<img src="Rcp155.jpg" alt="Karotten-Souffl&eacute; gekocht" width="400" height="249">

	<table>
		<tbody>
			<tr>
				<td colspan="2"><strong>Zutaten f&uuml;r 4 Personen:</strong></td>
			</tr>
			<tr>
				<td class="td-qty">250 g</td>
				<td><strong>Karotten</strong></td>
			</tr>
			<tr>
				<td class="td-qty">80 g</td>
				<td><strong>Margarine</strong> (oder Butter)</td>
			</tr>
			<tr>
				<td class="td-qty">100 g</td>
				<td><strong>Mehl</strong></td>
			</tr>
			<tr>
				<td class="td-qty">7 dl</td>
				<td><strong>Milch</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1,5 TL</td>
				<td><strong>Salz</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1 Prise</td>
				<td><strong>Muskat</strong></td>
			</tr>
			<tr>
				<td class="td-qty">4</td>
				<td><strong>Eier</strong></td>
			</tr>
		</tbody>
	</table>

	<h2>Zubereitung:</h2>
	<p>Karotten raffeln, in Margarine oder Butter d&auml;mpfen.</p>
	<p>Mehl dar&uuml;ber streuen, mitd&auml;mpfen.</p>
	<p>Mit Milch abl&ouml;schen. Zu glatter Sauce verr&uuml;hren, w&uuml;rzen und ausk&uuml;hlen lassen.</p>
	<p>Ofen auf 175&#176;C vorheizen.</p>
	<p>Eigelb unter die ausgek&uuml;hlte Masse r&uuml;hren.</p>
	<p>Eiweiss zu steifem Schnee schlagen und sorgf&auml;ltig darunter ziehen.</p>
	<p>In die ungefettete Form (das Souffl&eacute; steigt besser) einf&uuml;llen und w&auml;hrend 50 Minuten - 60
		Minuten backen.</p>
	<p>Sofort servieren.</p>

	<h2>Quelle:</h2>
	<p>Herbert Eigenmann, Code: KAR</p>

	<h2>Bewertung:</h2>
	<p>Hat geschmeckt. Ergab eine doch eher f&uuml;llende Beilage. RE 27.9.2009</p>

<p CLASS='linkback'>
    <a href='https://richardeigenmann.github.io/RezeptsammlungNg' target='_parent'>
    Richi's Rezeptsammlung
    </a>
</p>
<label>
    <input type="checkbox" id="wakeLockToggle" checked>
    Wake Lock to prevent screen timeout
</label>
    
<script async src="https://www.googletagmanager.com/gtag/js?id=G-XWT8EWS5BN"></script>
<script>
  // Function to request a wake lock
  async function requestWakeLock() {
      try {
        wakeLock = await navigator.wakeLock.request('screen');
        //statusText.innerHTML = 'Wake Lock is currently <strong>active</strong>.';

        // Listen for wake lock being released
        wakeLock.addEventListener('release', () => {
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        wakeLockToggle.checked = false; // Update checkbox state
        });

        console.log('Wake Lock activated.');
      } catch (err) {
        console.error(`Failed to acquire wake lock: ${err.message}`);
      }
    }

  // Function to release the wake lock
  function releaseWakeLock() {
      if (wakeLock) {
        wakeLock.release();
        wakeLock = null;
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        console.log('Wake Lock released.');
      }
    }

  // Initialize wake lock on page load
  async function initializeWakeLock() {
      if ('wakeLock' in navigator) {
          await requestWakeLock(); // Enable wake lock by default
      } else {
        //statusText.innerHTML = 'Wake Lock is <strong>not supported</strong> by your browser.';
      }
  }

    // Event listener for the checkbox
    wakeLockToggle.addEventListener('change', () => {
      if (wakeLockToggle.checked) {
    requestWakeLock();
      } else {
    releaseWakeLock();
      }
    });

    // Handle page visibility change
    document.addEventListener('visibilitychange', () => {
      if (wakeLock && document.visibilityState === 'hidden') {
    releaseWakeLock(); // Automatically release wake lock when page is hidden
  wakeLockToggle.checked = false; // Update checkbox state
      }
    });

  // Enable wake lock by default when the page loads
  window.addEventListener('load', initializeWakeLock);
</script>
</body>

</html>