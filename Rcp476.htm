<!DOCTYPE HTML>
<html>

<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>Gef&uuml;llte Schweinskoteletts</title>
	<link rel="StyleSheet" href="rcp.css" type="text/css" media="screen">
	<meta name="RCP-Speise-Kategorie" content="Fleischgerichte">
	<meta name="RCP-Speise-Kategorie" content="Hauptgerichte">
	<meta name="RCP-Region" content="Schweizerisch">
	<meta name="RCP-Zutat" content="Schweinskoteletts">
	<meta name="RCP-Zutat" content="Zwiebeln">
	<meta name="RCP-Zutat" content="&Auml;pfel">
	<meta name="RCP-Zutat" content="Appenzeller K&auml;se">
	<meta name="RCP-Zutat" content="Cayennepfeffer">
	<meta name="RCP-Zutat" content="Speck">
	<meta name="RCP-Bewertung" content="4 Sterne">
	<meta name="RCP-Quelle" content="Werbebrosch&uuml;re">
</head>

<body>
	<h1>Gef&uuml;llte Schweinskoteletts</h1>
	<img src="Rcp476.jpg" alt="Gef&uuml;llte Schweinskoteletts" width="400" height="295">

	<table>
		<tbody>
			<tr>
				<td colspan="2"><strong>Zutaten f&uuml;r 4 Personen:</strong></td>
			</tr>
			<tr>
				<td class="td-qty">4</td>
				<td>grosse, dick geschnittene <strong>Schweinskoteletts</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1</td>
				<td><strong>Zwiebel</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1 El</td>
				<td><strong>Bratbutter</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1</td>
				<td><strong>Apfel</strong></td>
			</tr>
			<tr>
				<td class="td-qty">200 g</td>
				<td><strong>Appenzeller K&auml;se</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1 Prise</td>
				<td><strong>Cayennepfeffer</strong></td>
			</tr>
			<tr>
				<td class="td-qty"></td>
				<td><strong>Salz</strong></td>
			</tr>
			<tr>
				<td class="td-qty">8 Tranchen</td>
				<td><strong>Bratspeck</strong></td>
			</tr>
			<tr>
				<td class="td-qty"></td>
				<td><strong>schwarzer Pfeffer</strong> aus der M&uuml;hle</td>
			</tr>
			<tr>
				<td class="td-qty"></td>
				<td><strong>Bratbutter zum Braten</strong></td>
			</tr>
		</tbody>
	</table>

	<h2>Zubereitung:</h2>
	<p>
		Mit einem scharfen Messer in jedes Kotelett eine grosse Tasche zum F&uuml;llen schneiden (eventuell vom Metzger
		machen lassen).
	</p>
	<p>Die Zwiebel sch&auml;len und sehr fein hacken. In der Bratbutter kurz and&uuml;nsten, dann ausk&uuml;hlen lassen.
	</p>
	<p>Den Apfel sch&auml;len. Apfel und K&auml;se fein reiben.</p>
	<p>Beides zusammen mit der Zwiebel mischen und die Masse mit Cayennepfeffer und etwas Salz w&uuml;rzen.</p>
	<p>Die K&auml;semasse in die Koteletts f&uuml;llen und diese mit jeweils 2 Specktranchen satt umwickeln, damit der
		K&auml;se beim braten nicht ausl&auml;uft. Eventuell mit Zahnstocher verschliessen.</p>
	<p>Die Koteletts rundum mit Salz und Pfeffer w&uuml;rzen. In reichlich Bratbutter zuerst auf grossem Feuer 1 1/2
		Minuten anbraten, dann auf mittlerer bis kleiner Hitze auf jeder Seite je 6-8 Minuten fertig braten.</p>
	<p>Dazu passen Bratkartoffeln oder ein Kartoffelsalat.</p>

	<h2>Quelle:</h2>
	<p>Werbebrosch&uuml;re f&uuml;r Appenzeller K&auml;se, 2005</p>

	<h2>Bewertung:</h2>
	<p>Schmeckte am 4.2.2008 ausgezeichnet. Ist allerdings bestimmt nichts f&uuml;r die Linie. RE</p>

<p CLASS='linkback'>
    <a href='https://richardeigenmann.github.io/RezeptsammlungNg' target='_parent'>
    Richi's Rezeptsammlung
    </a>
</p>
<label>
    <input type="checkbox" id="wakeLockToggle" checked>
    Wake Lock to prevent screen timeout
</label>
    
<script async src="https://www.googletagmanager.com/gtag/js?id=G-XWT8EWS5BN"></script>
<script>
  // Function to request a wake lock
  async function requestWakeLock() {
      try {
        wakeLock = await navigator.wakeLock.request('screen');
        //statusText.innerHTML = 'Wake Lock is currently <strong>active</strong>.';

        // Listen for wake lock being released
        wakeLock.addEventListener('release', () => {
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        wakeLockToggle.checked = false; // Update checkbox state
        });

        console.log('Wake Lock activated.');
      } catch (err) {
        console.error(`Failed to acquire wake lock: ${err.message}`);
      }
    }

  // Function to release the wake lock
  function releaseWakeLock() {
      if (wakeLock) {
        wakeLock.release();
        wakeLock = null;
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        console.log('Wake Lock released.');
      }
    }

  // Initialize wake lock on page load
  async function initializeWakeLock() {
      if ('wakeLock' in navigator) {
          await requestWakeLock(); // Enable wake lock by default
      } else {
        //statusText.innerHTML = 'Wake Lock is <strong>not supported</strong> by your browser.';
      }
  }

    // Event listener for the checkbox
    wakeLockToggle.addEventListener('change', () => {
      if (wakeLockToggle.checked) {
    requestWakeLock();
      } else {
    releaseWakeLock();
      }
    });

    // Handle page visibility change
    document.addEventListener('visibilitychange', () => {
      if (wakeLock && document.visibilityState === 'hidden') {
    releaseWakeLock(); // Automatically release wake lock when page is hidden
  wakeLockToggle.checked = false; // Update checkbox state
      }
    });

  // Enable wake lock by default when the page loads
  window.addEventListener('load', initializeWakeLock);
</script>
</body>

</html>