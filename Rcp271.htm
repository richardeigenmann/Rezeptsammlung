<!DOCTYPE HTML>
<html>

<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>H&ouml;rnli-Gem&uuml;se-Gratin</title>
	<link rel="StyleSheet" href="rcp.css" type="text/css" media="screen">
	<meta name="RCP-Speise-Kategorie" content="Aus dem Ofen">
	<meta name="RCP-Speise-Kategorie" content="Vegetarisch">
	<meta name="RCP-Speise-Kategorie" content="Hauptgerichte">
	<meta name="RCP-Speise-Kategorie" content="Aufl&auml;ufe">
	<meta name="RCP-Speise-Kategorie" content="Gratins">
	<meta name="RCP-Zutat" content="H&ouml;rnli">
	<meta name="RCP-Zutat" content="R&uuml;ebli">
	<meta name="RCP-Zutat" content="Broccoli">
	<meta name="RCP-Zutat" content="Zwiebeln">
	<meta name="RCP-Zutat" content="Knoblauch">
	<meta name="RCP-Zutat" content="Eier">
	<meta name="RCP-Zutat" content="Milch">
	<meta name="RCP-Zutat" content="Sauerer Halbrahm">
	<meta name="RCP-Zutat" content="Appenzeller K&auml;se">
	<meta name="RCP-Bewertung" content="3 Sterne">
	<meta name="RCP-Quelle" content="eBalance">
</head>

<body>
	<h1>H&ouml;rnli-Gem&uuml;se-Gratin</h1>
	<img src="Rcp271.jpg" alt="H&ouml;rnli-Gem&uuml;se-Gratin" width="400" height="296">

	<table>
		<tbody>
			<tr>
				<td colspan="2"><strong>Zutaten f&uuml;r 2 Portionen:</strong></td>
			</tr>
			<tr>
				<td class="td-qty">150g</td>
				<td><strong>Soja Vollkorn H&ouml;rnli</strong></td>
			</tr>
			<tr>
				<td class="td-qty">200 g</td>
				<td><strong>R&uuml;ebli</strong></td>
			</tr>
			<tr>
				<td class="td-qty">200 g</td>
				<td><strong>Broccoli</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1/2</td>
				<td><strong>Zwiebel</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1/2 Zehe</td>
				<td><strong>Knoblauch</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1/2 KL</td>
				<td><strong>Oliven&ouml;l</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1 dl</td>
				<td><strong>Gem&uuml;sebouillon</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1</td>
				<td><strong>Ei</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1/2 dl</td>
				<td><strong>Milch</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1/2 Becher = 90g</td>
				<td><strong>Sauer-Halbrahm</strong></td>
			</tr>
			<tr>
				<td class="td-qty"></td>
				<td><strong>Pfeffer</strong></td>
			</tr>
			<tr>
				<td class="td-qty"></td>
				<td><strong>Kr&auml;utersalz</strong></td>
			</tr>
			<tr>
				<td class="td-qty">25 g</td>
				<td><strong>Appenzeller-K&auml;se</strong></td>
			</tr>
		</tbody>
	</table>

	<h2>Zubereitung:</h2>
	<p>Zubereitungszeit: 60 Minuten</p>
	<p>H&ouml;rnli in kochendem Salzwasser al dente kochen und abgiessen.</p>
	<p>Die R&uuml;ebli sch&auml;len und in feine Scheiben schneiden.</p>
	<p>Den Broccoli in R&ouml;schen brechen.</p>
	<p>Zwiebel fein hacken.</p>
	<p>In einer Pfanne die Zwiebel mit dem durchgepressten Knoblauch in Oliven&ouml;l and&uuml;nsten.</p>
	<p>R&uuml;ebli und Broccoli beif&uuml;gen und mitd&uuml;nsten.</p>
	<p>Gem&uuml;sebouillon dazugiessen, aufkochen und 5-10 Minuten k&ouml;cheln lassen.</p>
	<p>Gratinform mit Oliven&ouml;l ausstreichen.</p>
	<p>Ofen auf 200&deg;C vorheizen.</p>
	<p>Die gekochten H&ouml;rnli und Gem&uuml;se abwechslungsweise in die Gratinform schichten.</p>
	<p>Den Guss durch verr&uuml;hren des Eies, der Milch und des Halbrahms zubereiten. Mit Salz und Pfeffer w&uuml;rzen.
	</p>
	<p>Guss &uuml;ber den Gratin geben und mit Reibk&auml;se bestreuen.</p>
	<p>20-30 Minuten auf der untersten Rille des Ofen gratinieren.</p>

	<h2>Quelle:</h2>
	<p>eBalance Rezeptsammlung.</p>

	<h2>Kalorien:</h2>
	<p>1 Portion = 489 kcal (531g), 19% Protein = 23g, 53% Kohlenhydrate = 64g, 27% Fett = 15g</p>

	<h2>Bewertung:</h2>
	<p>Ganz OK, der Gratin. RE 19.1.2013</p>

<p CLASS='linkback'>
    <a href='https:\/\/richardeigenmann.github.io\/RezeptsammlungNg' target='_parent'>
    Richi's Rezeptsammlung
    </a>
</p>
<label>
    <input type="checkbox" id="wakeLockToggle" checked>
    Wake Lock to prevent screen timeout
</label>
    <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-47341387-3', 'auto');
  ga('send', 'pageview');

    let wakeLock = null; // Variable to hold the wake lock instance
    const statusText = document.getElementById('status');
    const wakeLockToggle = document.getElementById('wakeLockToggle');

    // Function to request a wake lock
    async function requestWakeLock() {
      try {
        wakeLock = await navigator.wakeLock.request('screen');
        //statusText.innerHTML = 'Wake Lock is currently <strong>active</strong>.';

        // Listen for wake lock being released
        wakeLock.addEventListener('release', () => {
          //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
          wakeLockToggle.checked = false; // Update checkbox state
        });

        console.log('Wake Lock activated.');
      } catch (err) {
        console.error(`Failed to acquire wake lock: ${err.message}`);
      }
    }

    // Function to release the wake lock
    function releaseWakeLock() {
      if (wakeLock) {
        wakeLock.release();
        wakeLock = null;
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        console.log('Wake Lock released.');
      }
    }

    // Initialize wake lock on page load
    async function initializeWakeLock() {
      if ('wakeLock' in navigator) {
        await requestWakeLock(); // Enable wake lock by default
      } else {
        //statusText.innerHTML = 'Wake Lock is <strong>not supported</strong> by your browser.';
      }
    }

    // Event listener for the checkbox
    wakeLockToggle.addEventListener('change', () => {
      if (wakeLockToggle.checked) {
        requestWakeLock();
      } else {
        releaseWakeLock();
      }
    });

    // Handle page visibility change
    document.addEventListener('visibilitychange', () => {
      if (wakeLock && document.visibilityState === 'hidden') {
        releaseWakeLock(); // Automatically release wake lock when page is hidden
        wakeLockToggle.checked = false; // Update checkbox state
      }
    });

    // Enable wake lock by default when the page loads
    window.addEventListener('load', initializeWakeLock);
</script>
</body>

</html>