<!DOCTYPE HTML>
<html>

<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>Kalbsschnitzel mit Grapefruit</title>
	<link rel="StyleSheet" href="rcp.css" type="text/css" media="screen">
	<meta name="RCP-Speise-Kategorie" content="Fleischgerichte">
	<meta name="RCP-Zutat" content="Grapefruit">
	<meta name="RCP-Zutat" content="Kalbsschnitzel">
	<meta name="RCP-Zutat" content="Rahm">
	<meta name="RCP-Zutat" content="Klare Sauce">
	<meta name="RCP-Zutat" content="Marsala">
	<meta name="RCP-Zutat" content="Rohschinken">
	<meta name="RCP-Zutat" content="Paprika">
	<meta name="RCP-Zutat" content="Butter">
	<meta name="RCP-Bewertung" content="3 Sterne">
	<meta name="RCP-Quelle" content="Herbert Eigenmann">
</head>

<body>
	<h1>Kalbsschnitzel mit Grapefruit</h1>
	<img src="Rcp111.jpg" alt="Kalbsschnitzel mit Grapefruit" width="400" height="327">

	<table>
		<tbody>
			<tr>
				<td colspan="2"><strong>Zutaten f&uuml;r 4 Personen:</strong></td>
			</tr>
			<tr>
				<td class="td-qty">4</td>
				<td><strong>Grapefruits</strong></td>
			</tr>
			<tr>
				<td class="td-qty">8</td>
				<td><strong>Kalbsschnitzel (&agrave; 150 g) Etwas viel??</strong></td>
			</tr>
			<tr>
				<td class="td-qty">4 EL</td>
				<td><strong>Rahm</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1/2 dl</td>
				<td><strong>klare Sauce</strong></td>
			</tr>
			<tr>
				<td class="td-qty">3 EL</td>
				<td><strong>Marsala</strong></td>
			</tr>
			<tr>
				<td class="td-qty">2 Scheiben</td>
				<td><strong>Rohschinken</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1 EL</td>
				<td><strong>Gourmet Butter</strong></td>
			</tr>
			<tr>
				<td class="td-qty">20 g</td>
				<td><strong>Tafelbutter</strong></td>
			</tr>
			<tr>
				<td class="td-qty"></td>
				<td><strong>Salz</strong></td>
			</tr>
			<tr>
				<td class="td-qty"></td>
				<td><strong>Pfeffer</strong></td>
			</tr>
			<tr>
				<td class="td-qty"></td>
				<td><strong>Paprika</strong></td>
			</tr>
		</tbody>
	</table>

	<h2>Zubereitung:</h2>
	<p><strong>Zubereitungszeit:</strong> 20 Minuten
		<br><strong>Bratzeit:</strong> 2-3 Minuten

		<p>Schinken in feine Streifen schneiden. 2 Grapefruits gut sch&auml;len, so dass auch die weissen H&auml;utchen
			entfernt werden.
			Gesch&auml;lte Schnitze aus den Trennw&auml;nden herausschneiden, dabei den herab tropfenden Saft auffangen.
			Restliche Grapefruits auspressen.</p>
		<p>Marsala und Grapefruitsaft aufkochen, bis nur noch ca. 1/2 dl Fl&uuml;ssigkeit verbleibt.</p>
		<p>Rahm und klare Sauce zuf&uuml;gen und nochmals etwas reduzieren. Mit Salz, Pfeffer und Paprika w&uuml;rzen.
		</p>
		<p>Teller warm stellen!</p>
		<p>Schnitzel beidseitig rasch in Butter braten. Aus der Pfanne nehmen, w&uuml;rzen und warm stellen.</p>
		<p>Schinkenstreifen und Grapefruitschnitze rasch im Bratenfonds anziehen lassen. Butter mit der heissen Sauce
			gut vermischen.</p>
		<p>Die Schnitzel mit der Sauce &uuml;berziehen und mit den Grapefruitfilets und Schinken garnieren.</p>

		<h2>Kalorien:</h2>
		<p><strong>Pro Portion:</strong> 540 Kalorien, 1884 Joule</p>

		<h2>Quelle:</h2>
		<p>Herbert Eigenmann, Code: KLG</p>

		<h2>Bewertung:</h2>
		<p>Schmeckt toll. Der Grapefruit-Geschmack ist etwas ungewohnt, kommt aber gut. Richard Eigenmann, 20.5.2000</p>
		<p>Am 26.1.2010 war mir der Grapefruit-Geschmack von den Tranchen fast etwas zu stark. Die Sauce hat gut
			geschmeckt. Mangels Madeira habe ich Portwein und Cognac verwendet. RE</p>

<p CLASS='linkback'>
    <a href='https://richardeigenmann.github.io/RezeptsammlungNg' target='_parent'>
    Richi's Rezeptsammlung
    </a>
</p>
<label>
    <input type="checkbox" id="wakeLockToggle" checked>
    Wake Lock to prevent screen timeout
</label>
    
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-47341387-3', 'auto');
  ga('send', 'pageview');

    let wakeLock = null; // Variable to hold the wake lock instance
    const statusText = document.getElementById('status');
    const wakeLockToggle = document.getElementById('wakeLockToggle');

    // Function to request a wake lock
    async function requestWakeLock() {
      try {
        wakeLock = await navigator.wakeLock.request('screen');
        //statusText.innerHTML = 'Wake Lock is currently <strong>active</strong>.';

        // Listen for wake lock being released
        wakeLock.addEventListener('release', () => {
          //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
          wakeLockToggle.checked = false; // Update checkbox state
        });

        console.log('Wake Lock activated.');
      } catch (err) {
        console.error(`Failed to acquire wake lock: ${err.message}`);
      }
    }

    // Function to release the wake lock
    function releaseWakeLock() {
      if (wakeLock) {
        wakeLock.release();
        wakeLock = null;
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        console.log('Wake Lock released.');
      }
    }

    // Initialize wake lock on page load
    async function initializeWakeLock() {
      if ('wakeLock' in navigator) {
        await requestWakeLock(); // Enable wake lock by default
      } else {
        //statusText.innerHTML = 'Wake Lock is <strong>not supported</strong> by your browser.';
      }
    }

    // Event listener for the checkbox
    wakeLockToggle.addEventListener('change', () => {
      if (wakeLockToggle.checked) {
        requestWakeLock();
      } else {
        releaseWakeLock();
      }
    });

    // Handle page visibility change
    document.addEventListener('visibilitychange', () => {
      if (wakeLock && document.visibilityState === 'hidden') {
        releaseWakeLock(); // Automatically release wake lock when page is hidden
        wakeLockToggle.checked = false; // Update checkbox state
      }
    });

    // Enable wake lock by default when the page loads
    window.addEventListener('load', initializeWakeLock);
</script>
</body>

</html>