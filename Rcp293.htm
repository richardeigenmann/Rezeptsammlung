<!DOCTYPE HTML>
<html>

<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>Kuchen mit Griotten</title>
	<link rel="StyleSheet" href="rcp.css" type="text/css" media="screen">
	<meta name="RCP-Speise-Kategorie" content="Cakes">
	<meta name="RCP-Speise-Kategorie" content="Vegetarisch">
	<meta name="RCP-Speise-Kategorie" content="Aus dem Ofen">
	<meta name="RCP-Zutat" content="Margarine">
	<meta name="RCP-Zutat" content="Zucker">
	<meta name="RCP-Zutat" content="Eier">
	<meta name="RCP-Zutat" content="Mehl">
	<meta name="RCP-Zutat" content="Backpulver">
	<meta name="RCP-Zutat" content="Zitronen">
	<meta name="RCP-Zutat" content="Girotten">
	<meta name="RCP-Bewertung" content="2 Sterne">
	<meta name="RCP-Quelle" content="Herbert Eigenmann">
</head>

<body>
	<h1>Kuchen mit Griotten</h1>
	<img src="Rcp293.jpg" alt="Kuchen mit Griotten" width="400" height="331">

	<table>
		<tbody>
			<tr>
				<td colspan="2"><strong>Zutaten:</strong></td>
			</tr>
			<tr>
				<td class="td-qty">125 g</td>
				<td><strong>Margarine</strong></td>
			</tr>
			<tr>
				<td class="td-qty">125 g</td>
				<td><strong>Zucker</strong></td>
			</tr>
			<tr>
				<td class="td-qty">4</td>
				<td><strong>Eier</strong></td>
			</tr>
			<tr>
				<td class="td-qty">125 g</td>
				<td><strong>Mehl</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1/2 Pack</td>
				<td><strong>Backpulver</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1</td>
				<td><strong>Zitrone</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1 Prise</td>
				<td><strong>Salz</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1 Dose</td>
				<td><strong>Griotten</strong></td>
			</tr>
		</tbody>
	</table>

	<h2>Zubereitung:</h2>
	<p>Margarine und Zucker schaumig r&uuml;hren.</p>
	<p>4 Eigelb beif&uuml;gen, Dann Mehl und Backpulver dazu geben, sowie abgeriebene Schale der Zitrone und Salz.</p>
	<p>Zum Schluss 4 Eiweiss steif schlagen und sorgf&auml;ltig unter die Masse ziehen.</p>
	<p>Den Teig in eine runde ausgebutterte Springform einf&uuml;llen.</p>
	<p>Dose Griotten abtropfen lassen. Die H&auml;lfte der Griotten auf den Teig legen. Im vorgeheizten Ofen 10 - 15
		Minuten backen.</p>
	<p>Dann die restlichen Griotten auf den Teig legen und noch 15 - 20 Minuten bei mittlerer Hitze goldbraun fertig
		backen.</p>

	<h2>Quelle:</h2>
	<p>Herbert Eigenmann, Code: KSG</p>

	<h2>Bewertung:</h2>
	<p>Sandra war wenig angetan am 18 Nov 2010. Ich fand den Kuchen ganz OK. Er war zu wenig gebacken und in der Mitte
		noch fl&uuml;ssig. Eine Folge von den unpr&auml;zise Angaben im Rezept. Der Teig ist recht simpel im Geschmack
		mit einer Note nach Zitronensaft. Die Girotten sind das wichtige. Diejenigen die ich in der Migros fand waren
		sehr schmackhaft und saftig und haben den Kuchen das gewisse Etwas gegeben. RE</p>

<p CLASS='linkback'>
    <a href='https:\/\/richardeigenmann.github.io\/RezeptsammlungNg' target='_parent'>
    Richi's Rezeptsammlung
    </a>
</p>
<label>
    <input type="checkbox" id="wakeLockToggle" checked>
    Wake Lock to prevent screen timeout
</label>
    <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-47341387-3', 'auto');
  ga('send', 'pageview');

    let wakeLock = null; // Variable to hold the wake lock instance
    const statusText = document.getElementById('status');
    const wakeLockToggle = document.getElementById('wakeLockToggle');

    // Function to request a wake lock
    async function requestWakeLock() {
      try {
        wakeLock = await navigator.wakeLock.request('screen');
        //statusText.innerHTML = 'Wake Lock is currently <strong>active</strong>.';

        // Listen for wake lock being released
        wakeLock.addEventListener('release', () => {
          //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
          wakeLockToggle.checked = false; // Update checkbox state
        });

        console.log('Wake Lock activated.');
      } catch (err) {
        console.error(`Failed to acquire wake lock: ${err.message}`);
      }
    }

    // Function to release the wake lock
    function releaseWakeLock() {
      if (wakeLock) {
        wakeLock.release();
        wakeLock = null;
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        console.log('Wake Lock released.');
      }
    }

    // Initialize wake lock on page load
    async function initializeWakeLock() {
      if ('wakeLock' in navigator) {
        await requestWakeLock(); // Enable wake lock by default
      } else {
        //statusText.innerHTML = 'Wake Lock is <strong>not supported</strong> by your browser.';
      }
    }

    // Event listener for the checkbox
    wakeLockToggle.addEventListener('change', () => {
      if (wakeLockToggle.checked) {
        requestWakeLock();
      } else {
        releaseWakeLock();
      }
    });

    // Handle page visibility change
    document.addEventListener('visibilitychange', () => {
      if (wakeLock && document.visibilityState === 'hidden') {
        releaseWakeLock(); // Automatically release wake lock when page is hidden
        wakeLockToggle.checked = false; // Update checkbox state
      }
    });

    // Enable wake lock by default when the page loads
    window.addEventListener('load', initializeWakeLock);
</script>
</body>

</html>