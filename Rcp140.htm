<!DOCTYPE HTML>
<html>

<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>Gazpacho andalus</title>
	<link rel="StyleSheet" href="rcp.css" type="text/css" media="screen">
	<meta name="RCP-Speise-Kategorie" content="Suppen">
	<meta name="RCP-Speise-Kategorie" content="Vegetarisch">
	<meta name="RCP-Zutat" content="Tomaten">
	<meta name="RCP-Zutat" content="Zwiebeln">
	<meta name="RCP-Zutat" content="Knoblauch">
	<meta name="RCP-Zutat" content="Essig">
	<meta name="RCP-Zutat" content="Peperoni">
	<meta name="RCP-Zutat" content="Gurken">
	<meta name="RCP-Zutat" content="Basilikum">
	<meta name="RCP-Bewertung" content="3 Sterne">
	<meta name="RCP-Quelle" content="Herbert Eigenmann">
</head>
<h1>Gazpacho andalus</h1>
<img src="Rcp140.jpg" alt="Rezept" width="350" height="409">

<table>
	<tbody>
		<tr>
			<td colspan="2"><strong>Zutaten f&uuml;r 4 Personen:</strong></td>
		</tr>
		<tr>
			<td class="td-qty">5</td>
			<td><strong>Tomaten</strong></td>
		</tr>
		<tr>
			<td class="td-qty">1</td>
			<td><strong>Zwiebel</strong></td>
		</tr>
		<tr>
			<td class="td-qty">3</td>
			<td><strong>Knoblauchzehen</strong></td>
		</tr>
		<tr>
			<td class="td-qty">1 EL</td>
			<td><strong>Essig</strong></td>
		</tr>
		<tr>
			<td class="td-qty">1</td>
			<td><strong>Peperoni, klein</strong></td>
		</tr>
		<tr>
			<td class="td-qty">1/4</td>
			<td><strong>Gurke</strong></td>
		</tr>
		<tr>
			<td class="td-qty">2 Zweige</td>
			<td><strong>Basilikum</strong></td>
		</tr>
		<tr>
			<td class="td-qty"></td>
			<td><strong>Salz</strong></td>
		</tr>
		<tr>
			<td class="td-qty"></td>
			<td><strong>Pfeffer</strong></td>
		</tr>
	</tbody>
</table>

<h2>Zubereitung:</h2>
<p>Tomaten, Zwiebeln, Knoblauch grob schneiden und mixen.</p>
<p>Peperoni und Gurke in feine W&uuml;rfel schneiden, zugeben, und mit Salz, Pfeffer, Essig, Basilikum w&uuml;rzen.</p>
<p>K&uuml;hl servieren. Dazu: ger&ouml;stete Brotw&uuml;rfel oder Knoblauchbrot.</p>

<h2>Quelle:</h2>
<p>Herbert Eigenmann, Code: GZP</p>

<h2>Bewertung:</h2>
<p>Schmeckte am 1.4.2006 ganz ordentlich. Ich habe noch einige Spritzer Tabasco beigegeben. Kalt ist es besser als
	direkt aus dem Mixer.</p>

<p CLASS='linkback'>
    <a href='https://richardeigenmann.github.io/RezeptsammlungNg' target='_parent'>
    Richi's Rezeptsammlung
    </a>
</p>
<label>
    <input type="checkbox" id="wakeLockToggle" checked>
    Wake Lock to prevent screen timeout
</label>
    
<script async src="https://www.googletagmanager.com/gtag/js?id=G-XWT8EWS5BN"></script>
<script>
  // Function to request a wake lock
  async function requestWakeLock() {
      try {
        wakeLock = await navigator.wakeLock.request('screen');
        //statusText.innerHTML = 'Wake Lock is currently <strong>active</strong>.';

        // Listen for wake lock being released
        wakeLock.addEventListener('release', () => {
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        wakeLockToggle.checked = false; // Update checkbox state
        });

        console.log('Wake Lock activated.');
      } catch (err) {
        console.error(`Failed to acquire wake lock: ${err.message}`);
      }
    }

  // Function to release the wake lock
  function releaseWakeLock() {
      if (wakeLock) {
        wakeLock.release();
        wakeLock = null;
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        console.log('Wake Lock released.');
      }
    }

  // Initialize wake lock on page load
  async function initializeWakeLock() {
      if ('wakeLock' in navigator) {
          await requestWakeLock(); // Enable wake lock by default
      } else {
        //statusText.innerHTML = 'Wake Lock is <strong>not supported</strong> by your browser.';
      }
  }

    // Event listener for the checkbox
    wakeLockToggle.addEventListener('change', () => {
      if (wakeLockToggle.checked) {
    requestWakeLock();
      } else {
    releaseWakeLock();
      }
    });

    // Handle page visibility change
    document.addEventListener('visibilitychange', () => {
      if (wakeLock && document.visibilityState === 'hidden') {
    releaseWakeLock(); // Automatically release wake lock when page is hidden
  wakeLockToggle.checked = false; // Update checkbox state
      }
    });

  // Enable wake lock by default when the page loads
  window.addEventListener('load', initializeWakeLock);
</script>
</body>

</html>