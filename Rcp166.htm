<!DOCTYPE HTML>
<html>

<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Spinat nach Florentiner Art</title>
    <link rel="StyleSheet" href="rcp.css" type="text/css" media="screen">
    <meta name="RCP-Speise-Kategorie" content="Vegetarisch">
    <meta name="RCP-Speise-Kategorie" content="Beilagen">
    <meta name="RCP-Speise-Kategorie" content="Aus dem Ofen">
    <meta name="RCP-Region" content="Italienisch">
    <meta name="RCP-Zutat" content="Spinat">
    <meta name="RCP-Zutat" content="Rahm">
    <meta name="RCP-Zutat" content="Butter">
    <meta name="RCP-Zutat" content="Eier">
    <meta name="RCP-Zutat" content="Muskatnuss">
    <meta name="RCP-Zutat" content="Parmesan">
    <meta name="RCP-Bewertung" content="4 Sterne">
    <meta name="RCP-Quelle" content="Herbert Eigenmann">
</head>

<body>
    <h1>Spinat nach Florentiner Art</h1>
    <img src="Rcp166.jpg" alt="Spinat nach Florentiner Art" width="400" height="259">

    <table>
        <tbody>
            <tr>
                <td colspan="2"><strong>Zutaten f&uuml;r 4 Personen:</strong></td>
            </tr>
            <tr>
                <td class="td-qty">1 Paket</td>
                <td><strong>Tiefk&uuml;hlspinat</strong></td>
            </tr>
            <tr>
                <td class="td-qty">1 dl</td>
                <td><strong>Rahm</strong></td>
            </tr>
            <tr>
                <td class="td-qty">1 St&uuml;ck</td>
                <td><strong>Butter</strong></td>
            </tr>
            <tr>
                <td class="td-qty">3</td>
                <td><strong>Eier</strong></td>
            </tr>
            <tr>
                <td class="td-qty"></td>
                <td><strong>Salz, Pfeffer</strong></td>
            </tr>
            <tr>
                <td class="td-qty"></td>
                <td><strong>Muskat</strong></td>
            </tr>
            <tr>
                <td class="td-qty">2 EL</td>
                <td><strong>Parmesan</strong></td>
            </tr>
        </tbody>
    </table>

    <h2>Zubereitung:</h2>
    <p>Tiefk&uuml;hlspinat in die Pfanne legen, auftauen lassen und zugedeckt auf kleiner Hitze 10 Minuten leise kochen
        lassen.</p>
    <p>Etwas ausk&uuml;hlen lassen.</p>
    <p>Eier aufschlagen, die Eigelb zum Spinat geben, die Eiweisse steif schlagen.</p>
    <p>Butter, Rahm, Salz, Pfeffer und Muskatnuss dazu mischen, zuletzt frisch geriebenen Parmesank&auml;se und das
        steif geschlagene Weiss der 3 Eier unterziehen.</p>
    <p>Gratinform ausbuttern und den Spinat in die gebutterte Gratinform einf&uuml;llen, mit Butterflocken und Parmesan
        bestreuen und im Ofen &uuml;berbacken. (Vielleicht 10 Minuten bei 180&deg;C).</p>

    <h2>Quelle:</h2>
    <p>Herbert Eigenmann, Code: SPL</p>

    <h2>Bewertung:</h2>
    <p>Schmeckt toll. RE 18.10.2009</p>

<p CLASS='linkback'>
    <a href='https://richardeigenmann.github.io/RezeptsammlungNg' target='_parent'>
    Richi's Rezeptsammlung
    </a>
</p>
<label>
    <input type="checkbox" id="wakeLockToggle" checked>
    Wake Lock to prevent screen timeout
</label>
    
<!-- Google Tag Manager -->
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
  new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
  j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
  'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
  })(window,document,'script','dataLayer','GTM-PHL53P');</script>
  <!-- End Google Tag Manager -->
<!-- Google Tag Manager (noscript) -->
<noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-PHL53P" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
<!-- End Google Tag Manager (noscript) -->

<script>
  // Function to request a wake lock
  async function requestWakeLock() {
      try {
        wakeLock = await navigator.wakeLock.request('screen');
        //statusText.innerHTML = 'Wake Lock is currently <strong>active</strong>.';

        // Listen for wake lock being released
        wakeLock.addEventListener('release', () => {
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        wakeLockToggle.checked = false; // Update checkbox state
        });

        console.log('Wake Lock activated.');
      } catch (err) {
        console.error(`Failed to acquire wake lock: ${err.message}`);
      }
    }

  // Function to release the wake lock
  function releaseWakeLock() {
      if (wakeLock) {
        wakeLock.release();
        wakeLock = null;
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        console.log('Wake Lock released.');
      }
    }

  // Initialize wake lock on page load
  async function initializeWakeLock() {
      if ('wakeLock' in navigator) {
          await requestWakeLock(); // Enable wake lock by default
      } else {
        //statusText.innerHTML = 'Wake Lock is <strong>not supported</strong> by your browser.';
      }
  }

    // Event listener for the checkbox
    wakeLockToggle.addEventListener('change', () => {
      if (wakeLockToggle.checked) {
    requestWakeLock();
      } else {
    releaseWakeLock();
      }
    });

    // Handle page visibility change
    document.addEventListener('visibilitychange', () => {
      if (wakeLock && document.visibilityState === 'hidden') {
    releaseWakeLock(); // Automatically release wake lock when page is hidden
  wakeLockToggle.checked = false; // Update checkbox state
      }
    });

  // Enable wake lock by default when the page loads
  window.addEventListener('load', initializeWakeLock);
</script>
</body>

</html>