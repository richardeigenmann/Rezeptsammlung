<!DOCTYPE HTML>
<html>

<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>Curry-Nudeln mit geschnetzelter Pouletbrust</title>
	<link rel="StyleSheet" href="rcp.css" type="text/css" media="screen">
	<meta name="RCP-Speise-Kategorie" content="Fleischgerichte">
	<meta name="RCP-Speise-Kategorie" content="Hauptgerichte">
	<meta name="RCP-Zutat" content="Spargeln">
	<meta name="RCP-Zutat" content="Broccoli">
	<meta name="RCP-Zutat" content="Pouletschnitzel">
	<meta name="RCP-Zutat" content="Nudeln">
	<meta name="RCP-Zutat" content="Bratensauce">
	<meta name="RCP-Zutat" content="Paprika">
	<meta name="RCP-Zutat" content="Currypulver">
	<meta name="RCP-Bewertung" content="4 Sterne">
	<meta name="RCP-Quelle" content="Werbebrosch&uuml;re">
</head>

<body>
	<h1>Curry-Nudeln mit geschnetzelter Pouletbrust</h1>
	<img src="Rcp129.jpg" alt="Curry-Nudeln mit geschnetzelter Pouletbrust" width="400" height="334">

	<table>
		<tbody>
			<tr>
				<td colspan="2"><strong>Zutaten f&uuml;r 4 Personen:</strong></td>
			</tr>
			<tr>
				<td class="td-qty">8</td>
				<td><strong>gr&uuml;ne Spargeln (frisch/Dose)</strong></td>
			</tr>
			<tr>
				<td class="td-qty">einige</td>
				<td><strong>Broccolir&ouml;schen</strong></td>
			</tr>
			<tr>
				<td class="td-qty">600 g</td>
				<td><strong>Pouletschnitzel</strong></td>
			</tr>
			<tr>
				<td class="td-qty">400 g</td>
				<td><strong>frische Nudeln</strong></td>
			</tr>
			<tr>
				<td class="td-qty"></td>
				<td><strong>Salz</strong></td>
			</tr>
			<tr>
				<td class="td-qty">2 EL</td>
				<td><strong>Instant Bratensauce (Tube)</strong></td>
			</tr>
			<tr>
				<td class="td-qty"></td>
				<td><strong>&Ouml;l</strong></td>
			</tr>
			<tr>
				<td class="td-qty"></td>
				<td><strong>Salz</strong></td>
			</tr>
			<tr>
				<td class="td-qty"></td>
				<td><strong>Pfeffer</strong></td>
			</tr>
			<tr>
				<td class="td-qty"></td>
				<td><strong>Paprika</strong></td>
			</tr>
			<tr>
				<td class="td-qty"> 1 El</td>
				<td><strong>Currypulver</strong></td>
			</tr>
		</tbody>
	</table>

	<h2>Zubereitung:</h2>
	<p>Spargeln r&uuml;sten, Broccolir&ouml;schen halbieren, Pouletfleisch in Streifen schneiden.</p>
	<p>Spargeln, Broccoli und Nudeln separat in Salzwasser garen. Bratensauce mit 2dl heissem Wasser aufkochen.</p>
	<p>Fleisch braten und w&uuml;rzen. Curry d&uuml;nsten, mit etwas Wasser abl&ouml;schen und die Nudeln darin wenden.
		Mit Broccoli mischen und mit den &uuml;brigen Zutaten anrichten.</p>


	<h2>Quelle:</h2>
	<p>Migros Restaurant, 2.-7. M&auml;rz 1992.</p>


	<h2>Bewertung:</h2>
	<p>Am 20.11.1998 von RE getestet. Schmeckt hervorragend. Allerdings sind die Spargeln, wenn sie aus der Dose kommen
		etwas st&ouml;rend kalt. Also irgendwie aufheizen.<br />
		Habe es am 19.11.2007 in der Mikrowelle probiert.... Die explodieren ja voll. Macht Spass, bis jemand den
		Mikrowellen-Ofen putzen muss anschliessend...</p>

<p CLASS='linkback'>
    <a href='https://richardeigenmann.github.io/RezeptsammlungNg' target='_parent'>
    Richi's Rezeptsammlung
    </a>
</p>
<label>
    <input type="checkbox" id="wakeLockToggle" checked>
    Wake Lock to prevent screen timeout
</label>
    
<script async src="https://www.googletagmanager.com/gtag/js?id=G-XWT8EWS5BN"></script>
<script>
  // Function to request a wake lock
  async function requestWakeLock() {
      try {
        wakeLock = await navigator.wakeLock.request('screen');
        //statusText.innerHTML = 'Wake Lock is currently <strong>active</strong>.';

        // Listen for wake lock being released
        wakeLock.addEventListener('release', () => {
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        wakeLockToggle.checked = false; // Update checkbox state
        });

        console.log('Wake Lock activated.');
      } catch (err) {
        console.error(`Failed to acquire wake lock: ${err.message}`);
      }
    }

  // Function to release the wake lock
  function releaseWakeLock() {
      if (wakeLock) {
        wakeLock.release();
        wakeLock = null;
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        console.log('Wake Lock released.');
      }
    }

  // Initialize wake lock on page load
  async function initializeWakeLock() {
      if ('wakeLock' in navigator) {
          await requestWakeLock(); // Enable wake lock by default
      } else {
        //statusText.innerHTML = 'Wake Lock is <strong>not supported</strong> by your browser.';
      }
  }

    // Event listener for the checkbox
    wakeLockToggle.addEventListener('change', () => {
      if (wakeLockToggle.checked) {
    requestWakeLock();
      } else {
    releaseWakeLock();
      }
    });

    // Handle page visibility change
    document.addEventListener('visibilitychange', () => {
      if (wakeLock && document.visibilityState === 'hidden') {
    releaseWakeLock(); // Automatically release wake lock when page is hidden
  wakeLockToggle.checked = false; // Update checkbox state
      }
    });

  // Enable wake lock by default when the page loads
  window.addEventListener('load', initializeWakeLock);
</script>
</body>

</html>