<!DOCTYPE HTML>
<html>

<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Glasierte Kastanien nach d'Chuchi</title>
  <link rel="StyleSheet" href="rcp.css" type="text/css" media="screen">
  <meta name="RCP-Speise-Kategorie" content="Beilagen">
  <meta name="RCP-Speise-Kategorie" content="Vegetarisch">
  <meta name="RCP-Zutat" content="Butter">
  <meta name="RCP-Zutat" content="Bouillon">
  <meta name="RCP-Zutat" content="Kastanien">
  <meta name="RCP-Zutat" content="Zitronensaft">
  <meta name="RCP-Bewertung" content="3 Sterne">
  <meta name="RCP-Quelle" content="d'Chuchi">
</head>

<body>
  <h1>Glasierte Kastanien nach d'Chuchi</h1>
  <img src="Rcp417.jpg" alt="Glasierte Kastanien nach d'Chuchi" width="400" height="267">

  <table>
    <tbody>
      <tr>
        <td colspan="2"><strong>Zutaten f&uuml;r 2-3 Personen:</strong></td>
      </tr>
      <tr>
        <td class="td-qty">2 El</td>
        <td><strong>Zucker</strong></td>
      </tr>
      <tr>
        <td class="td-qty">25g</td>
        <td><strong>Kochbutter</strong></td>
      </tr>
      <tr>
        <td class="td-qty">1dl</td>
        <td>heisse <strong>Gefl&uuml;gelbouillon</strong></td>
      </tr>
      <tr>
        <td class="td-qty">200-250 g</td>
        <td>tiefgek&uuml;hlte, gesch&auml;lte <strong>Kastanien</strong></td>
      </tr>
      <tr>
        <td class="td-qty">wenig</td>
        <td><strong>Zitronensaft</strong></td>
      </tr>
      <tr>
        <td class="td-qty">&nbsp;</td>
        <td><strong>Salz</strong></td>
      </tr>
    </tbody>
  </table>


  <h2>Zubereitung:</h2>
  <p>Zubereiten: 25 Minuten</p>
  <p>Den Zucker und die Butter in einer Pfanne unter R&uuml;hren goldbraun werden lassen.</p>
  <p>Mit der heissen Bouillon abl&ouml;schen und unter R&uuml;hren auf kleinem Feuer kochen bis sich der Zucker
    vollst&auml;ndig aufgel&ouml;st hat.</p>
  <p>Den Zitronensaft und die noch gefrorenen Kastanien beif&uuml;gen, sparsam salzen und auf kleinem Feuer in der
    offenen Pfanne etwa 20 Minuten leise kochen lassen.</p>

  <h2>Kalorien:</h2>
  <p>Pro Portion: 2 g Eiweiss, 8 g Fett, 38 g Kohlenhydrate, 236 Kalorien, 987 Joule</p>

  <h2>Quelle:</h2>
  <p>d'Chuchi Heft 6, November 1997 Seite 66</p>
  <p>Siehe auch <a href="Rcp379.htm">Glasierte Kastanien nach Betty Bossi</a></p>

  <h2>Bewertung:</h2>
  <p>Schmeckt gut. RE 31.10.2008</p>

<p CLASS='linkback'>
    <a href='https://richardeigenmann.github.io/RezeptsammlungNg' target='_parent'>
    Richi's Rezeptsammlung
    </a>
</p>
<label>
    <input type="checkbox" id="wakeLockToggle" checked>
    Wake Lock to prevent screen timeout
</label>
    
<script async src="https://www.googletagmanager.com/gtag/js?id=G-XWT8EWS5BN"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-XWT8EWS5BN');
  // Function to request a wake lock
  async function requestWakeLock() {
      try {
        wakeLock = await navigator.wakeLock.request('screen');
        //statusText.innerHTML = 'Wake Lock is currently <strong>active</strong>.';

        // Listen for wake lock being released
        wakeLock.addEventListener('release', () => {
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        wakeLockToggle.checked = false; // Update checkbox state
        });

        console.log('Wake Lock activated.');
      } catch (err) {
        console.error(`Failed to acquire wake lock: ${err.message}`);
      }
    }

  // Function to release the wake lock
  function releaseWakeLock() {
      if (wakeLock) {
        wakeLock.release();
        wakeLock = null;
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        console.log('Wake Lock released.');
      }
    }

  // Initialize wake lock on page load
  async function initializeWakeLock() {
      if ('wakeLock' in navigator) {
          await requestWakeLock(); // Enable wake lock by default
      } else {
        //statusText.innerHTML = 'Wake Lock is <strong>not supported</strong> by your browser.';
      }
  }

    // Event listener for the checkbox
    wakeLockToggle.addEventListener('change', () => {
      if (wakeLockToggle.checked) {
    requestWakeLock();
      } else {
    releaseWakeLock();
      }
    });

    // Handle page visibility change
    document.addEventListener('visibilitychange', () => {
      if (wakeLock && document.visibilityState === 'hidden') {
    releaseWakeLock(); // Automatically release wake lock when page is hidden
  wakeLockToggle.checked = false; // Update checkbox state
      }
    });

  // Enable wake lock by default when the page loads
  window.addEventListener('load', initializeWakeLock);
</script>
</body>

</html>