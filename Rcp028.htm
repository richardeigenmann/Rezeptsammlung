<!DOCTYPE HTML>
<html>

<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Krautstrudel</title>
    <link rel="StyleSheet" href="rcp.css" type="text/css" media="screen">
    <meta name="RCP-Speise-Kategorie" content="Aus dem Ofen">
    <meta name="RCP-Speise-Kategorie" content="Vegetarisch">
    <meta name="RCP-Zutat" content="Weisskraut">
    <meta name="RCP-Zutat" content="Butter">
    <meta name="RCP-Zutat" content="Zwiebeln">
    <meta name="RCP-Zutat" content="K&uuml;mmel">
    <meta name="RCP-Zutat" content="Strudelbl&auml;tter">
    <meta name="RCP-Bewertung" content="2 Sterne">
    <meta name="RCP-Quelle" content="Herbert Eigenmann">
</head>

<body>
    <h1>Krautstrudel</h1>
    <img src="Rcp028.jpg" alt="Krautstrudel" width="450" height="330">

    <table>
        <tbody>
            <tr>
                <td colspan="2">
                    <strong>Zutaten f&uuml;r 4 Personen:</strong>
                </td>
            </tr>
            <tr>
                <td class="td-qty">400 g</td>
                <td><strong>Weisskraut geschnitten</strong></td>
            </tr>
            <tr>
                <td class="td-qty">20 g</td>
                <td><strong>Fett</strong></td>
            </tr>
            <tr>
                <td class="td-qty">1</td>
                <td><strong>Zwiebel</strong></td>
            </tr>
            <tr>
                <td class="td-qty"></td>
                <td><strong>Salz</strong></td>
            </tr>
            <tr>
                <td class="td-qty"></td>
                <td><strong>Pfeffer</strong></td>
            </tr>
            <tr>
                <td class="td-qty"></td>
                <td><strong>K&uuml;mmel</strong></td>
            </tr>
            <tr>
                <td class="td-qty">2</td>
                <td><strong>Strudelbl&auml;tter gezogen</strong></td>
            </tr>
        </tbody>
    </table>


    <h2>Zubereitung:</h2>
    <p>Fein gehackte Zwiebel in Fett leicht br&auml;unen.</p>
    <p>Das fein geschnittene Weisskraut,
        Salz, K&uuml;mmel und Pfeffer beif&uuml;gen, alles gut mischen, ausk&uuml;hlen
        lassen.</p>
    <p>Dann wird die Masse auf den gezogenen Strudelteig gestrichen.</p>
    <p>Strudel zusammenrollen, sofort mit Fett bestreichen und hellbraun backen.</p>
    <p>Mit Salat servieren.</p>

    <h2>Quelle:</h2>
    <p>Herbert Eigenmann, Code: KOD</p>

    <h2>Bewertung:</h2>
    <p>3.11.2004 RE: Ich weiss nicht was Kraut ist und habe halt irgend so einen Kohl
        gekauft in der Migros. Das habe ich ged&auml;mpft und es schmeckte eigentlich
        ganz passabel. Mit dem fixfertigen Strudelteig von der Migros ist es ganz einfach
        daraus einen Strudel zu basteln. Irgendwie war es aber langweilig. Vielleicht
        schmeckt es interessanter wenn man da noch Speckw&uuml;rfel dazu gibt?</p>

<p CLASS='linkback'>
    <a href='https://richardeigenmann.github.io/RezeptsammlungNg' target='_parent'>
    Richi's Rezeptsammlung
    </a>
</p>
<label>
    <input type="checkbox" id="wakeLockToggle" checked>
    Wake Lock to prevent screen timeout
</label>
    
<script async src="https://www.googletagmanager.com/gtag/js?id=G-XWT8EWS5BN"></script>
<script>
  // Function to request a wake lock
  async function requestWakeLock() {
      try {
        wakeLock = await navigator.wakeLock.request('screen');
        //statusText.innerHTML = 'Wake Lock is currently <strong>active</strong>.';

        // Listen for wake lock being released
        wakeLock.addEventListener('release', () => {
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        wakeLockToggle.checked = false; // Update checkbox state
        });

        console.log('Wake Lock activated.');
      } catch (err) {
        console.error(`Failed to acquire wake lock: ${err.message}`);
      }
    }

  // Function to release the wake lock
  function releaseWakeLock() {
      if (wakeLock) {
        wakeLock.release();
        wakeLock = null;
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        console.log('Wake Lock released.');
      }
    }

  // Initialize wake lock on page load
  async function initializeWakeLock() {
      if ('wakeLock' in navigator) {
          await requestWakeLock(); // Enable wake lock by default
      } else {
        //statusText.innerHTML = 'Wake Lock is <strong>not supported</strong> by your browser.';
      }
  }

    // Event listener for the checkbox
    wakeLockToggle.addEventListener('change', () => {
      if (wakeLockToggle.checked) {
    requestWakeLock();
      } else {
    releaseWakeLock();
      }
    });

    // Handle page visibility change
    document.addEventListener('visibilitychange', () => {
      if (wakeLock && document.visibilityState === 'hidden') {
    releaseWakeLock(); // Automatically release wake lock when page is hidden
  wakeLockToggle.checked = false; // Update checkbox state
      }
    });

  // Enable wake lock by default when the page loads
  window.addEventListener('load', initializeWakeLock);
</script>

</body>

</html>