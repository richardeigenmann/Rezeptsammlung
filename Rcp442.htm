<!DOCTYPE HTML>
<html>

<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Nidelt&auml;feli mit N&uuml;ssen</title>
    <link rel="StyleSheet" href="rcp.css" type="text/css" media="screen">
    <meta name="RCP-Speise-Kategorie" content="Guetzli">
    <meta name="RCP-Speise-Kategorie" content="Vegetarisch">
    <meta name="RCP-Zutat" content="Rahm">
    <meta name="RCP-Zutat" content="Zucker">
    <meta name="RCP-Zutat" content="Cashew N&uuml;sse">
    <meta name="RCP-Bewertung" content="2 Sterne">
    <meta name="RCP-Quelle" content="Betty Bossi">
<!-- Google Tag Manager -->
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
  new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
  j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
  'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
  })(window,document,'script','dataLayer','GTM-PHL53P');</script>
<!-- End Google Tag Manager -->
</head>
<body>
    <h1>Nidelt&auml;feli mit N&uuml;ssen</h1>
    <img src="Rcp442.jpg" alt="Nidelt&auml;feli mit N&uuml;ssen" width="400" height="351">

    <table>
        <tbody>
            <tr>
                <td colspan="2"><strong>Zutaten</strong></td>
            </tr>
            <tr>
                <td class="td-qty">2.5 dl</td>
                <td><strong>Rahm</strong></td>
            </tr>
            <tr>
                <td class="td-qty">250 g</td>
                <td><strong>Zucker</strong></td>
            </tr>
            <tr>
                <td class="td-qty">50 g</td>
                <td><strong>Cashew N&uuml;sse</strong></td>
            </tr>
        </tbody>
    </table>



    <h2>Mise en place:</h2>
    <p>Ein rundes Backblech von ca. 22cm Durchmesser mit Backpapier auslegen.</p>

    <h2>Zubereitung:</h2>
    <p>Rahm und Zucker in einer weiten Pfanne aufkochen, Hitze reduzieren. </p>
    <p>Unter gelegentlichem R&uuml;hren ca. 30 Minuten k&ouml;cheln, bis die Masse
        hellbraun und dickfl&uuml;ssig ist.</p>
    <p>Pfanne von der Platte nehmen, Masse leicht abk&uuml;hlen. </p>
    <p>N&uuml;sse ohne Fett r&ouml;sten, fein hacken, unter die Caramelmasse mischen.</p>
    <p>Masse in das vorbereitete Blech giessen, glatt streichen, ca. 1 Stunde fest werden lassen. </p>
    <p>Masse auf ein Brett st&uuml;rzen, Backpapier entfernen, beliebige Formen ausstechen
        oder in ca. 1.5 cm grosse W&uuml;rfel
        schneiden</p>

    <p>Haltbarkeit: in einer Dose k&uuml;hl und trocken ca. 3 Wochen.</p>

    <h2>Quelle:</h2>
    <p>Betty Bossi Zeitung 10-04</p>

    <h2>Bewertung:</h2>
    <p>Meine Niedelt&auml;feli schmecken eigentlich sehr gut und fast wie echt.
        Aber ich habe sie wohl nicht ganz lange genug gekocht denn sie sind
        etwas sehr weich. Der K&uuml;hlschrank hilft aber Sandra hat wohl
        recht wenn sie meint das sei nicht so einfach. RE 15.5.2010</p>

<p CLASS='linkback'>
    <a href='https://richardeigenmann.github.io/RezeptsammlungNg' target='_parent'>
    Richi's Rezeptsammlung
    </a>
</p>
<label>
    <input type="checkbox" id="wakeLockToggle" checked>
    Wake Lock to prevent screen timeout
</label>
    
<!-- Google Tag Manager (noscript) -->
<noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-PHL53P" height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
<!-- End Google Tag Manager (noscript) -->

<script>
  // Function to request a wake lock
  async function requestWakeLock() {
      try {
        wakeLock = await navigator.wakeLock.request('screen');
        //statusText.innerHTML = 'Wake Lock is currently <strong>active</strong>.';

        // Listen for wake lock being released
        wakeLock.addEventListener('release', () => {
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        wakeLockToggle.checked = false; // Update checkbox state
        });

        console.log('Wake Lock activated.');
      } catch (err) {
        console.error(`Failed to acquire wake lock: ${err.message}`);
      }
    }

  // Function to release the wake lock
  function releaseWakeLock() {
      if (wakeLock) {
        wakeLock.release();
        wakeLock = null;
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        console.log('Wake Lock released.');
      }
    }

  // Initialize wake lock on page load
  async function initializeWakeLock() {
      if ('wakeLock' in navigator) {
          await requestWakeLock(); // Enable wake lock by default
      } else {
        //statusText.innerHTML = 'Wake Lock is <strong>not supported</strong> by your browser.';
      }
  }

    // Event listener for the checkbox
    wakeLockToggle.addEventListener('change', () => {
      if (wakeLockToggle.checked) {
    requestWakeLock();
      } else {
    releaseWakeLock();
      }
    });

    // Handle page visibility change
    document.addEventListener('visibilitychange', () => {
      if (wakeLock && document.visibilityState === 'hidden') {
    releaseWakeLock(); // Automatically release wake lock when page is hidden
  wakeLockToggle.checked = false; // Update checkbox state
      }
    });

  // Enable wake lock by default when the page loads
  window.addEventListener('load', initializeWakeLock);
</script></body>

</html>