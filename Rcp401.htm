<!DOCTYPE HTML>
<html>

<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Krevettensalat mit Rucola und roten Peperoni</title>
  <link rel="StyleSheet" href="rcp.css" type="text/css" media="screen">
  <meta name="RCP-Speise-Kategorie" content="Salate">
  <meta name="RCP-Speise-Kategorie" content="Fischgerichte">
  <meta name="RCP-Speise-Kategorie" content="Vorspeisen">
  <meta name="RCP-Zutat" content="Krevetten">
  <meta name="RCP-Zutat" content="Rucola">
  <meta name="RCP-Zutat" content="Peperoni">
  <meta name="RCP-Zutat" content="Tomaten">
  <meta name="RCP-Zutat" content="Kapern">
  <meta name="RCP-Zutat" content="Aceto Balsamico">
  <meta name="RCP-Zutat" content="&Ouml;l">
  <meta name="RCP-Bewertung" content="4 Sterne">
  <meta name="RCP-Quelle" content="Werbebrosch&uuml;re">
</head>

<body>
  <h1>Krevettensalat mit Rucola und roten Peperoni</h1>
  <img src="Rcp401.jpg" alt="Krevettensalat mit Rucola und roten Peperoni" width="400" height="332">

  <table>
    <tbody>
      <tr>
        <td colspan="2"><strong>Leichte Hauptspeise f&uuml;r 4 Personen:</strong></td>
      </tr>
      <tr>
        <td class="td-qty">600g</td>
        <td><strong>Krevettenschw&auml;nze</strong>, gesch&auml;lt</td>
      </tr>
      <tr>
        <td class="td-qty">150g</td>
        <td><strong>Rucola</strong>
        </td>
      </tr>
      <tr>
        <td class="td-qty">1</td>
        <td>rote <strong>Peperoni</strong></td>
      </tr>
      <tr>
        <td class="td-qty">2</td>
        <td>kleine, reife <strong>Tomaten</strong></td>
      </tr>
      <tr>
        <td class="td-qty">2 El</td>
        <td><strong>Kapern</strong></td>
      </tr>
      <tr>
        <td class="td-qty">2 El</td>
        <td><strong>Aceto Balsamico</strong><br>
        </td>
      </tr>
      <tr>
        <td class="td-qty">4 El</td>
        <td><strong>Oliven&ouml;l</strong>
        </td>
      </tr>
      <tr>
        <td class="td-qty"></td>
        <td>schwarzer <strong>Pfeffer</strong> aus der M&uuml;hle
        </td>
      </tr>
      <tr>
        <td class="td-qty"></td>
        <td><strong>Meersalz</strong>
        </td>
      </tr>
    </tbody>
  </table>

  <h2>Zubereitung:</h2>
  <p><strong>Zubereitungszeit:</strong> ca 35 Minuten, Kochzeit 15 Minuten</p>
  <p>Die Krevetten unter fliessendem kalten Wasser waschen, trocken tupfen und zur Seite stellen. Rucola putzen, waschen
    und trocken schleudern. Die Stiele etwas k&uuml;rzen und die Bl&auml;tter quer halbieren. Die rote Peperoni
    halbieren, von Kernen und Scheidew&auml;nden befreien, waschen, vierteln und in feine Streifen schneiden. Die
    Tomaten waschen und vierteln und dabei die Stielans&auml;tze entfernen.</p>
  <p>In einer kleinen Sch&uuml;ssel 4 Essl&ouml;ffel Oliven&ouml;l, Aceto Balsamico, die Kapern, Salz und Pfeffer aus
    der M&uuml;hle zu einer Vinaigrette verr&uuml;hren.</p>
  <p>Etwas &Ouml;l in einer Bratpfanne erhitzen und die Krevetten darin rundherum 2 bis 3 Minuten braten. Aus der Pfanne
    nehmen, zur Seite stellen und etwas abk&uuml;hlen lassen.</p>
  <p>Die Rucolabl&auml;tter mit den Tomaten, den Peperonistreifen und den gebratenen Krevetten in einer grossen
    Sch&uuml;ssel vorsichtig mischen. Auf kleine Teller verteilen, mit der Vinaigrette betr&auml;ufeln und mit
    ofenfrischem Weissbrot servieren.</p>

  <h2>Quelle:</h2>
  <p>Migros, Rezeptbrosch&uuml;re</p>

  <h2>Bewertung:</h2>
  <p>Am 25.3.2005 zubereitet. Recht gut. Allerdings sollten die Krevetten irgendwie mariniert werden. Die warmen
    Krevetten erst am Schluss auf den Salat tun.</p>
  <p>Am 16.12.2009 habe ich die Krevetten in &Ouml;l mit Chilis und Ingwer mariniert und das schmeckte sehr fein.</p>

<p CLASS='linkback'>
    <a href='https:\/\/richardeigenmann.github.io\/RezeptsammlungNg' target='_parent'>
    Richi's Rezeptsammlung
    </a>
</p>
<label>
    <input type="checkbox" id="wakeLockToggle" checked>
    Wake Lock to prevent screen timeout
</label>
    <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-47341387-3', 'auto');
  ga('send', 'pageview');

    let wakeLock = null; // Variable to hold the wake lock instance
    const statusText = document.getElementById('status');
    const wakeLockToggle = document.getElementById('wakeLockToggle');

    // Function to request a wake lock
    async function requestWakeLock() {
      try {
        wakeLock = await navigator.wakeLock.request('screen');
        //statusText.innerHTML = 'Wake Lock is currently <strong>active</strong>.';

        // Listen for wake lock being released
        wakeLock.addEventListener('release', () => {
          //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
          wakeLockToggle.checked = false; // Update checkbox state
        });

        console.log('Wake Lock activated.');
      } catch (err) {
        console.error(`Failed to acquire wake lock: ${err.message}`);
      }
    }

    // Function to release the wake lock
    function releaseWakeLock() {
      if (wakeLock) {
        wakeLock.release();
        wakeLock = null;
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        console.log('Wake Lock released.');
      }
    }

    // Initialize wake lock on page load
    async function initializeWakeLock() {
      if ('wakeLock' in navigator) {
        await requestWakeLock(); // Enable wake lock by default
      } else {
        //statusText.innerHTML = 'Wake Lock is <strong>not supported</strong> by your browser.';
      }
    }

    // Event listener for the checkbox
    wakeLockToggle.addEventListener('change', () => {
      if (wakeLockToggle.checked) {
        requestWakeLock();
      } else {
        releaseWakeLock();
      }
    });

    // Handle page visibility change
    document.addEventListener('visibilitychange', () => {
      if (wakeLock && document.visibilityState === 'hidden') {
        releaseWakeLock(); // Automatically release wake lock when page is hidden
        wakeLockToggle.checked = false; // Update checkbox state
      }
    });

    // Enable wake lock by default when the page loads
    window.addEventListener('load', initializeWakeLock);
</script></body>

</html>