<!DOCTYPE HTML>
<html>

<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Brownies (Variante 1)</title>
  <link rel="StyleSheet" href="rcp.css" type="text/css" media="screen">
  <meta name="RCP-Speise-Kategorie" content="Guetzli">
  <meta name="RCP-Speise-Kategorie" content="Vegetarisch">
  <meta name="RCP-Region" content="Amerikanisch">
  <meta name="RCP-Zutat" content="Butter">
  <meta name="RCP-Zutat" content="Schokolade">
  <meta name="RCP-Zutat" content="Eier">
  <meta name="RCP-Zutat" content="Zucker">
  <meta name="RCP-Zutat" content="Mehl">
  <meta name="RCP-Zutat" content="Vanillezucker">
  <meta name="RCP-Zutat" content="Backpulver">
  <meta name="RCP-Zutat" content="N&uuml;sse">
  <meta name="RCP-Bewertung" content="4 Sterne">
  <meta name="RCP-Quelle" content="Herbert Eigenmann">
</head>

<body>
  <h1>Brownies (Variante 1)</h1>
  <img src="Rcp328.jpg" alt="Brownies (Variante 1)" width="400" height="264">

  <table>
    <tbody>
      <tr>
        <td colspan="2"><strong>Zutaten:</strong></td>
      </tr>

      <tr>
        <td class="td-qty"> 150g </td>
        <td><strong>Butter</strong> oder <strong>Margarine</strong></td>
      </tr>
      <tr>
        <td class="td-qty"> 150g </td>
        <td><strong>Schokolade</strong></td>
      </tr>
      <tr>
        <td class="td-qty"> 4 </td>
        <td><strong>Eier</strong></td>
      </tr>
      <tr>
        <td class="td-qty"> 300g </td>
        <td><strong>Zucker</strong></td>
      </tr>
      <tr>
        <td class="td-qty"> 175g </td>
        <td><strong>Mehl</strong></td>
      </tr>
      <tr>
        <td class="td-qty"> 1 Pack </td>
        <td><strong>Vanillezucker</strong></td>
      </tr>
      <tr>
        <td class="td-qty"> 1 TL </td>
        <td><strong>Backpulver</strong></td>
      </tr>
      <tr>
        <td class="td-qty"> 1 Prise </td>
        <td><strong>Salz</strong></td>
      </tr>
      <tr>
        <td class="td-qty"> 100g </td>
        <td><strong>N&uuml;sse, grob gehackt</strong></td>
      </tr>
    </tbody>
  </table>



  <h2>Zubereitung:</h2>
  <p>Butter und Schokolade zusammen schmelzen und abk&uuml;hlen lassen.</p>
  <p>Eier schlagen. Zucker, Mehl, Salz und N&uuml;sse zugeben. Backpulver und Vanillezucker beigeben und vermengen.</p>
  <p>Masse in eine eingefettete Kuchenform (ca. 20 x 40 cm) ausstreichen (2 - 3 cm hoch) bei 185 &#176; ca. 30 Minuten
    backen (darf innen noch etwas feucht sein).</p>
  <p>Im warmen Zustand in W&uuml;rfel (4 cm2) schneiden Eventuell mit Schokoladenglasur &uuml;berziehen oder mit
    Puderzucker best&auml;uben.</p>

  <h2>Quelle:</h2>
  <p>Herbert Eigenmann, Code: LBW</p>

  <h2>Bewertung:</h2>
  <p>erdnuckel_at_nieber.net schreibt am 18.11.2003: Du kannst gerne alle vier Punkte den Brownies zukommen lassen. Sie
    waren super gut, nur das ich das n&auml;chste mal keine N&uuml;sse sondern Mandeln nehme. Die schmecken mir
    pers&ouml;nlich besser.</p>
  <p>Sehr gute Brownies. Sandra meint es sei etwas zu viel Mehl und gibt nur 3.5 Sterne. Die Brownies von Konrad sind
    besser: <a href="Rcp335.htm">Cream Cheese Brownies</a>, RE 22.3.2010</p>

<p CLASS='linkback'>
    <a href='https://richardeigenmann.github.io/RezeptsammlungNg' target='_parent'>
    Richi's Rezeptsammlung
    </a>
</p>
<label>
    <input type="checkbox" id="wakeLockToggle" checked>
    Wake Lock to prevent screen timeout
</label>
    
<script async src="https://www.googletagmanager.com/gtag/js?id=G-XWT8EWS5BN"></script>
<script>
  // Function to request a wake lock
  async function requestWakeLock() {
      try {
        wakeLock = await navigator.wakeLock.request('screen');
        //statusText.innerHTML = 'Wake Lock is currently <strong>active</strong>.';

        // Listen for wake lock being released
        wakeLock.addEventListener('release', () => {
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        wakeLockToggle.checked = false; // Update checkbox state
        });

        console.log('Wake Lock activated.');
      } catch (err) {
        console.error(`Failed to acquire wake lock: ${err.message}`);
      }
    }

  // Function to release the wake lock
  function releaseWakeLock() {
      if (wakeLock) {
        wakeLock.release();
        wakeLock = null;
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        console.log('Wake Lock released.');
      }
    }

  // Initialize wake lock on page load
  async function initializeWakeLock() {
      if ('wakeLock' in navigator) {
          await requestWakeLock(); // Enable wake lock by default
      } else {
        //statusText.innerHTML = 'Wake Lock is <strong>not supported</strong> by your browser.';
      }
  }

    // Event listener for the checkbox
    wakeLockToggle.addEventListener('change', () => {
      if (wakeLockToggle.checked) {
    requestWakeLock();
      } else {
    releaseWakeLock();
      }
    });

    // Handle page visibility change
    document.addEventListener('visibilitychange', () => {
      if (wakeLock && document.visibilityState === 'hidden') {
    releaseWakeLock(); // Automatically release wake lock when page is hidden
  wakeLockToggle.checked = false; // Update checkbox state
      }
    });

  // Enable wake lock by default when the page loads
  window.addEventListener('load', initializeWakeLock);
</script>
</body>

</html>