<!DOCTYPE HTML>
<html>

<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>Zwetschgentorte</title>
	<link rel="StyleSheet" href="rcp.css" type="text/css" media="screen">
	<meta name="RCP-Speise-Kategorie" content="Cakes">
	<meta name="RCP-Speise-Kategorie" content="Vegetarisch">
	<meta name="RCP-Zutat" content="Zwetschgen">
	<meta name="RCP-Zutat" content="Butter">
	<meta name="RCP-Zutat" content="Zucker">
	<meta name="RCP-Zutat" content="Eier">
	<meta name="RCP-Zutat" content="Vanillezucker">
	<meta name="RCP-Zutat" content="Zitronen">
	<meta name="RCP-Zutat" content="Mehl">
	<meta name="RCP-Zutat" content="Backpulver">
	<meta name="RCP-Zutat" content="Milch">
	<meta name="RCP-Zutat" content="Schlagrahm">
	<meta name="RCP-Bewertung" content="3 Sterne">
	<meta name="RCP-Quelle" content="Herbert Eigenmann">
</head>

<body>
	<h1>Zwetschgentorte</h1>
	<img src="Rcp313.jpg" alt="Zwetschgentorte" width="400" height="327">

	<table>
		<tbody>
			<tr>
				<td colspan="2"><strong>Zutaten:</strong></td>
			</tr>
			<tr>
				<td class="td-qty">750 g</td>
				<td><strong>Zwetschgen</strong></td>
			</tr>
			<tr>
				<td class="td-qty">75 g</td>
				<td><strong>Butter</strong></td>
			</tr>
			<tr>
				<td class="td-qty">125 g</td>
				<td><strong>Zucker</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1</td>
				<td><strong>Ei</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1 Pack</td>
				<td><strong>Vanillezucker</strong></td>
			</tr>
			<tr>
				<td class="td-qty"></td>
				<td><strong>Zitronenschale</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1 Prise</td>
				<td><strong>Salz</strong></td>
			</tr>
			<tr>
				<td class="td-qty">250 g</td>
				<td><strong>Mehl</strong></td>
			</tr>
			<tr>
				<td class="td-qty">3 TL</td>
				<td><strong>Backpulver</strong></td>
			</tr>
			<tr>
				<td class="td-qty"></td>
				<td><strong>Milch</strong></td>
			</tr>
			<tr>
				<td class="td-qty"></td>
				<td><strong>Schlagrahm</strong></td>
			</tr>
		</tbody>
	</table>

	<h2>Zubereitung:</h2>
	<p>Zwetschgen waschen, halbieren, entsteinen.</p>
	<p>Butter, Zucker, Vanillezucker, Ei schaumig r&uuml;hren,</p>
	<p>Mit abgeriebener Zitronenschale und Salz w&uuml;rzen. Mehl mit Backpulver durchs Sieb in den Teig mischen und so
		viel Milch dazu geben, dass der Teig schwer von der Kelle f&auml;llt. Er darf nicht zu d&uuml;nn sein, weil die
		Zwetschgen beim Backen sehr saftig werden.</p>
	<p>Den Teig in eine gut gefettete Springform einf&uuml;llen, die Zwetschgen sch&ouml;n darauf legen.</p>
	<p>Die Torte bei mittlerer Hitze (180&deg;C) ca. 45 Minuten. backen.</p>
	<p>Den heissen Kuchen aus der Form nehmen, mit Hagelzucker bestreuen und mit Schlagrahm servieren.</p>

	<h2>Quelle:</h2>
	<p>Herbert Eigenmann, Code: ZWT</p>

	<h2>Bewertung:</h2>
	<p>Am 5.7.2009 zubereitet. Ich habe Pflaumen genommen. Ist so in etwa aus der gleichen botanischen Familie. Hat gut
		geschmeckt. Der Teig wurde locker und luftig und hat gut mit den saftigen Pflaumen harmoniert. RE</p>


<p CLASS='linkback'>
    <a href='https://richardeigenmann.github.io/RezeptsammlungNg' target='_parent'>
    Richi's Rezeptsammlung
    </a>
</p>
<label>
    <input type="checkbox" id="wakeLockToggle" checked>
    Wake Lock to prevent screen timeout
</label>
    
<script async src="https://www.googletagmanager.com/gtag/js?id=G-XWT8EWS5BN"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-XWT8EWS5BN');
  // Function to request a wake lock
  async function requestWakeLock() {
      try {
        wakeLock = await navigator.wakeLock.request('screen');
        //statusText.innerHTML = 'Wake Lock is currently <strong>active</strong>.';

        // Listen for wake lock being released
        wakeLock.addEventListener('release', () => {
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        wakeLockToggle.checked = false; // Update checkbox state
        });

        console.log('Wake Lock activated.');
      } catch (err) {
        console.error(`Failed to acquire wake lock: ${err.message}`);
      }
    }

  // Function to release the wake lock
  function releaseWakeLock() {
      if (wakeLock) {
        wakeLock.release();
        wakeLock = null;
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        console.log('Wake Lock released.');
      }
    }

  // Initialize wake lock on page load
  async function initializeWakeLock() {
      if ('wakeLock' in navigator) {
          await requestWakeLock(); // Enable wake lock by default
      } else {
        //statusText.innerHTML = 'Wake Lock is <strong>not supported</strong> by your browser.';
      }
  }

    // Event listener for the checkbox
    wakeLockToggle.addEventListener('change', () => {
      if (wakeLockToggle.checked) {
    requestWakeLock();
      } else {
    releaseWakeLock();
      }
    });

    // Handle page visibility change
    document.addEventListener('visibilitychange', () => {
      if (wakeLock && document.visibilityState === 'hidden') {
    releaseWakeLock(); // Automatically release wake lock when page is hidden
  wakeLockToggle.checked = false; // Update checkbox state
      }
    });

  // Enable wake lock by default when the page loads
  window.addEventListener('load', initializeWakeLock);
</script>
</body>

</html>