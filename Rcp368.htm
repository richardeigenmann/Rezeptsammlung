<!DOCTYPE HTML>
<html>

<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>Cheesecake mit Blaubeeren</title>
	<link rel="StyleSheet" href="rcp.css" type="text/css" media="screen">
	<meta name="RCP-Speise-Kategorie" content="Cakes">
	<meta name="RCP-Speise-Kategorie" content="Vegetarisch">
	<meta name="RCP-Zutat" content="Petit Beurre">
	<meta name="RCP-Zutat" content="Butter">
	<meta name="RCP-Zutat" content="Magerquark">
	<meta name="RCP-Zutat" content="Rahm">
	<meta name="RCP-Zutat" content="Eier">
	<meta name="RCP-Zutat" content="Custard-Pulver">
	<meta name="RCP-Zutat" content="Zucker">
	<meta name="RCP-Zutat" content="Milch">
	<meta name="RCP-Zutat" content="Blaubeeren">
	<meta name="RCP-Kochwerkzeug" content="Springform 22cm">
	<meta name="RCP-Bewertung" content="3 Sterne">
	<meta name="RCP-Quelle" content="Sandra Keller">
</head>

<body>
	<h1>Cheesecake mit Blaubeeren</h1>
	<img src="Rcp368.jpg" alt="Cheesecake mit Blaubeeren" width="400" height="276">

	<table>
		<tbody>
			<tr>
				<td colspan="2"><strong>Zutaten:</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1 Pack</td>
				<td><strong>Petit Beurre</strong></td>
			</tr>
			<tr>
				<td class="td-qty"></td>
				<td><strong>Butter</strong></td>
			</tr>
			<tr>
				<td class="td-qty">250g</td>
				<td><strong>Magerquark</strong></td>
			</tr>
			<tr>
				<td class="td-qty">250 ml</td>
				<td><strong>Rahm</strong></td>
			</tr>
			<tr>
				<td class="td-qty">3</td>
				<td><strong>Eigelb</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1 L&ouml;ffel</td>
				<td><strong>Custard powder</strong> (oder Mehl + 1 p&auml;ckchen Vanillezucker)</td>
			</tr>
			<tr>
				<td class="td-qty">1 kl. Tasse</td>
				<td><strong>Zucker</strong></td>
			</tr>
			<tr>
				<td class="td-qty">0.5 Tasse</td>
				<td><strong>Milch</strong></td>
			</tr>
			<tr>
				<td class="td-qty">max. 0.5 Tasse</td>
				<td><strong>Blaubeeren</strong></td>
			</tr>
		</tbody>
	</table>

	<h2>Zubereitung:</h2>
	<p>Springform 22cm ausbuttern.</p>
	<p>Gegen 1 Pack Petit Beurre zerkr&uuml;meln und in der Backform verteilen (den Rest kann man Naschen).</p>
	<p>Butterflocken dar&uuml;ber streuen.</p>
	<p>Die 3 Eier trennen; das Eigelb in eine Sch&uuml;ssel in der alles gemischt wird und das Eiweiss in ein
		Gef&auml;ss in dem es nachher steif geschlagen wird.</p>
	<p>250 g Magerquark, 250 ml Rahm, 1 L&ouml;ffel Custard powder (oder Mehl + 1 P&auml;ckchen Vanillezucker), 1 kleine
		Tasse Zucker und 0.5 Tasse Milch zum Eigelb geben und gut verr&uuml;hren.</p>
	<p>Die Eiweiss steif schlagen und darunter ziehen.</p>
	<p>Falls vorhanden, die gefrorenen Blaubeeren (max. 0.5 Tasse, sonst schwimmt alles) auf die halb gef&uuml;llte form
		verteilen und mit der zweiten H&auml;lfte Teigmasse zudecken.</p>
	<p>Bei kleiner Hitze (180&deg;C) backen bis goldbraun (40 Minuten).</p>

	<h2>Quelle:</h2>
	<p>Sandra Keller July 1999</p>

	<h2>Bewertung:</h2>
	<p>Ergibt halt eine simple Quarktorte. War etwas luftig und vielleicht eine Spur zu s&uuml;ss. Liegt vielleicht
		daran, dass es im Sonntagsverkauf keine Blaubeeren mehr gab und ich Trauben substituiert habe. Schmeckte ganz
		OK. RE 2.7.2009</p>

<p CLASS='linkback'>
    <a href='https://richardeigenmann.github.io/RezeptsammlungNg' target='_parent'>
    Richi's Rezeptsammlung
    </a>
</p>
<label>
    <input type="checkbox" id="wakeLockToggle" checked>
    Wake Lock to prevent screen timeout
</label>
    
<script async src="https://www.googletagmanager.com/gtag/js?id=G-XWT8EWS5BN"></script>
<script>
  // Function to request a wake lock
  async function requestWakeLock() {
      try {
        wakeLock = await navigator.wakeLock.request('screen');
        //statusText.innerHTML = 'Wake Lock is currently <strong>active</strong>.';

        // Listen for wake lock being released
        wakeLock.addEventListener('release', () => {
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        wakeLockToggle.checked = false; // Update checkbox state
        });

        console.log('Wake Lock activated.');
      } catch (err) {
        console.error(`Failed to acquire wake lock: ${err.message}`);
      }
    }

  // Function to release the wake lock
  function releaseWakeLock() {
      if (wakeLock) {
        wakeLock.release();
        wakeLock = null;
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        console.log('Wake Lock released.');
      }
    }

  // Initialize wake lock on page load
  async function initializeWakeLock() {
      if ('wakeLock' in navigator) {
          await requestWakeLock(); // Enable wake lock by default
      } else {
        //statusText.innerHTML = 'Wake Lock is <strong>not supported</strong> by your browser.';
      }
  }

    // Event listener for the checkbox
    wakeLockToggle.addEventListener('change', () => {
      if (wakeLockToggle.checked) {
    requestWakeLock();
      } else {
    releaseWakeLock();
      }
    });

    // Handle page visibility change
    document.addEventListener('visibilitychange', () => {
      if (wakeLock && document.visibilityState === 'hidden') {
    releaseWakeLock(); // Automatically release wake lock when page is hidden
  wakeLockToggle.checked = false; // Update checkbox state
      }
    });

  // Enable wake lock by default when the page loads
  window.addEventListener('load', initializeWakeLock);
</script>
</body>

</html>