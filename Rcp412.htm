<!DOCTYPE HTML>
<html>

<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Lauwarmer Gem&uuml;sesalat im Parmesank&ouml;rbli</title>
  <link rel="StyleSheet" href="rcp.css" type="text/css" media="screen">
  <meta name="RCP-Speise-Kategorie" content="Beilagen">
  <meta name="RCP-Speise-Kategorie" content="Salate">
  <meta name="RCP-Speise-Kategorie" content="Vegetarisch">
  <meta name="RCP-Zutat" content="Parmesan">
  <meta name="RCP-Zutat" content="Lauch">
  <meta name="RCP-Zutat" content="Sellerie">
  <meta name="RCP-Zutat" content="R&uuml;ebli">
  <meta name="RCP-Zutat" content="Oliven&ouml;l">
  <meta name="RCP-Zutat" content="Aceto Balsamico">
  <meta name="RCP-Zutat" content="N&uuml;sslisalat">
  <meta name="RCP-Zutat" content="Randenf&auml;den">
  <meta name="RCP-Quelle" content="Werbebrosch&uuml;re">
  <meta name="RCP-Bewertung" content="4 Sterne">
</head>

<body>
  <h1>Lauwarmer Gem&uuml;sesalat im Parmesank&ouml;rbli</h1>
  <img src="Rcp412.jpg" alt="Lauwarmer Gem&uuml;sesalat im Parmesank&ouml;rbli" width="400" height="278">

  <table>
    <tbody>
      <tr>
        <td colspan="2"><strong>Zutaten f&uuml;r 4 Personen:</strong></td>
      </tr>
      <tr>
        <td class="td-qty">200 g</td>
        <td>geriebener <strong>Parmesan</strong></td>
      </tr>
      <tr>
        <td class="td-qty">1/2</td>
        <td><strong>Lauch</strong></td>
      </tr>
      <tr>
        <td class="td-qty">1/2</td>
        <td><strong>Sellerie</strong></td>
      </tr>
      <tr>
        <td class="td-qty">1 grosses</td>
        <td><strong>R&uuml;ebli</strong></td>
      </tr>
      <tr>
        <td class="td-qty">1</td>
        <td>gelbes <strong>R&uuml;ebli</strong></td>
      </tr>
      <tr>
        <td class="td-qty">&nbsp;</td>
        <td><strong>Oliven&ouml;l</strong></td>
      </tr>
      <tr>
        <td class="td-qty">&nbsp;</td>
        <td><strong>Aceto Balsamico</strong></td>
      </tr>
      <tr>
        <td class="td-qty">&nbsp;</td>
        <td><strong>Salz, Pfeffer</strong></td>
      </tr>
      <tr>
        <td class="td-qty">&nbsp;</td>
        <td><strong>N&uuml;sslisalat</strong> und <strong>Radenf&auml;den</strong> zum garnieren</td>
      </tr>
    </tbody>
  </table>

  <h2>Zubereitung:</h2>
  <p>Parmesan in einer kalten Bratpfanne mit intakter Versiegelung ausstreuen und anschliessend auf dem Herd erhitzen
    bis er schmilzt und leicht br&auml;unlich wird. Mit dem Spachtel vorsichtig herausheben und in einer Tasse zu einem
    K&ouml;rbchen formen. Erkalten lassen.</p>
  <p>Das Gem&uuml;se in Salzwasser kurz knackig kochen und anschliessend im noch warmen Zustand mit Oliven&ouml;l, Aceto
    Balsamico, Salz und Pfeffer abschmecken. Das Gem&uuml;se im K&ouml;rbli anrichten, mit N&uuml;sslisalat und
    Randenf&auml;den ausgarnieren.</p>

  <h2>Quelle:</h2>
  <p>Werbebrosch&uuml;re f&uuml;r Pfannen</p>

  <h2>Bewertung:</h2>
  <p>Schmeckt fein. Das abschreckende Basteln des K&ouml;rbchens ist gar nicht so schwer. RE, 28.10.2007</p>

<p CLASS='linkback'>
    <a href='https:\/\/richardeigenmann.github.io\/RezeptsammlungNg' target='_parent'>
    Richi's Rezeptsammlung
    </a>
</p>
<label>
    <input type="checkbox" id="wakeLockToggle" checked>
    Wake Lock to prevent screen timeout
</label>
    <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-47341387-3', 'auto');
  ga('send', 'pageview');

    let wakeLock = null; // Variable to hold the wake lock instance
    const statusText = document.getElementById('status');
    const wakeLockToggle = document.getElementById('wakeLockToggle');

    // Function to request a wake lock
    async function requestWakeLock() {
      try {
        wakeLock = await navigator.wakeLock.request('screen');
        //statusText.innerHTML = 'Wake Lock is currently <strong>active</strong>.';

        // Listen for wake lock being released
        wakeLock.addEventListener('release', () => {
          //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
          wakeLockToggle.checked = false; // Update checkbox state
        });

        console.log('Wake Lock activated.');
      } catch (err) {
        console.error(`Failed to acquire wake lock: ${err.message}`);
      }
    }

    // Function to release the wake lock
    function releaseWakeLock() {
      if (wakeLock) {
        wakeLock.release();
        wakeLock = null;
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        console.log('Wake Lock released.');
      }
    }

    // Initialize wake lock on page load
    async function initializeWakeLock() {
      if ('wakeLock' in navigator) {
        await requestWakeLock(); // Enable wake lock by default
      } else {
        //statusText.innerHTML = 'Wake Lock is <strong>not supported</strong> by your browser.';
      }
    }

    // Event listener for the checkbox
    wakeLockToggle.addEventListener('change', () => {
      if (wakeLockToggle.checked) {
        requestWakeLock();
      } else {
        releaseWakeLock();
      }
    });

    // Handle page visibility change
    document.addEventListener('visibilitychange', () => {
      if (wakeLock && document.visibilityState === 'hidden') {
        releaseWakeLock(); // Automatically release wake lock when page is hidden
        wakeLockToggle.checked = false; // Update checkbox state
      }
    });

    // Enable wake lock by default when the page loads
    window.addEventListener('load', initializeWakeLock);
</script>
</body>

</html>