<!DOCTYPE HTML>
<html>

<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Mini Cheesecakes</title>
  <link rel="StyleSheet" href="rcp.css" type="text/css" media="screen">
  <meta name="RCP-Speise-Kategorie" content="Desserts">
  <meta name="RCP-Speise-Kategorie" content="Aus dem Ofen">
  <meta name="RCP-Speise-Kategorie" content="Vegetarisch">
  <meta name="RCP-Kochwerkzeug" content="Auflaufform">
  <meta name="RCP-Zutat" content="Frischk&auml;se">
  <meta name="RCP-Zutat" content="Quark">
  <meta name="RCP-Zutat" content="Biskuits">
  <meta name="RCP-Zutat" content="Eier">
  <meta name="RCP-Zutat" content="Zucker">
  <meta name="RCP-Zutat" content="Zitronensaft">
  <meta name="RCP-Zutat" content="Kirschkonfit&uuml;re">
  <meta name="RCP-Bewertung" content="3 Sterne">
  <meta name="RCP-Quelle" content="Werbebrosch&uuml;re">
</head>

<body>
  <h1>Mini Cheesecakes</h1>
  <img src="Rcp431.jpg" alt="Mini Cheesecakes" width="400" height="347">

  <table>
    <tbody>
      <tr>
        <td colspan="2"><strong>6-8 Portionen</strong></td>
      </tr>
      <tr>
        <td class="td-qty">230 g</td>
        <td><strong>Philadelphia Frischk&auml;se</strong></td>
      </tr>
      <tr>
        <td class="td-qty">220 g</td>
        <td><strong>Rahmquark</strong></td>
      </tr>
      <tr>
        <td class="td-qty">6-8</td>
        <td><strong>Ingwer Kekse</strong> oder Willisauer Ringli</td>
      </tr>
      <tr>
        <td class="td-qty">2</td>
        <td><strong>Eier</strong></td>
      </tr>
      <tr>
        <td class="td-qty">100g</td>
        <td><strong>Zucker</strong></td>
      </tr>
      <tr>
        <td class="td-qty">30 ml</td>
        <td><strong>Zitronensaft</strong></td>
      </tr>
      <tr>
        <td class="td-qty">200 ml</td>
        <td><strong>Kirschenkonfit&uuml;re</strong></td>
      </tr>
    </tbody>
  </table>


  <h2>Zubereitung:</h2>
  <p>Einen Ingwer Keks oder ein Willisauer Ringli in jede kleine Auflaufform legen</p>
  <p>Frischk&auml;se mit Rahmquark, Eiern, Zucker und Zitronensaft gut vermischen.</p>
  <p>Die Kirschenkonfit&uuml;re unterheben.</p>
  <p>die Masse auf die Auflauff&ouml;rmchen verteilen.</p>
  <p>Im vorgeheizten Ofen bei 170&deg;C 25-30 Minuten backen. (Die Masse sollte fest werden.)</p>
  <p>Bei Zimmertemperatur oder kalt servieren.</p>

  <h2>Variationen:</h2>
  <p>Erdbeer- oder Schokolade Mini Cheesecakes: Schokoladenkekse verwenden. Erdbeerkonfit&uuml;re oder frische zerhackte
    Erdbeeren zugeben.</p>

  <h2>Quelle:</h2>
  <p>Werbung auf Lancewood cream cheese Pack.</p>

  <h2>Bewertung:</h2>
  <p>Finally got round to testing this since I didn't have any suitable dishes. Instead of ginger biscuit I used
    Willisauerringli which turned out very nicely too. The pudding was quite soft despite the top having hardened a
    little. There was no indication of the temperature. I used 180&deg;C. I have corrected the recipe to 170. RE 22 Apr
    2012</p>

<p CLASS='linkback'>
    <a href='https:\/\/richardeigenmann.github.io\/RezeptsammlungNg' target='_parent'>
    Richi's Rezeptsammlung
    </a>
</p>
<label>
    <input type="checkbox" id="wakeLockToggle" checked>
    Wake Lock to prevent screen timeout
</label>
    <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-47341387-3', 'auto');
  ga('send', 'pageview');

    let wakeLock = null; // Variable to hold the wake lock instance
    const statusText = document.getElementById('status');
    const wakeLockToggle = document.getElementById('wakeLockToggle');

    // Function to request a wake lock
    async function requestWakeLock() {
      try {
        wakeLock = await navigator.wakeLock.request('screen');
        //statusText.innerHTML = 'Wake Lock is currently <strong>active</strong>.';

        // Listen for wake lock being released
        wakeLock.addEventListener('release', () => {
          //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
          wakeLockToggle.checked = false; // Update checkbox state
        });

        console.log('Wake Lock activated.');
      } catch (err) {
        console.error(`Failed to acquire wake lock: ${err.message}`);
      }
    }

    // Function to release the wake lock
    function releaseWakeLock() {
      if (wakeLock) {
        wakeLock.release();
        wakeLock = null;
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        console.log('Wake Lock released.');
      }
    }

    // Initialize wake lock on page load
    async function initializeWakeLock() {
      if ('wakeLock' in navigator) {
        await requestWakeLock(); // Enable wake lock by default
      } else {
        //statusText.innerHTML = 'Wake Lock is <strong>not supported</strong> by your browser.';
      }
    }

    // Event listener for the checkbox
    wakeLockToggle.addEventListener('change', () => {
      if (wakeLockToggle.checked) {
        requestWakeLock();
      } else {
        releaseWakeLock();
      }
    });

    // Handle page visibility change
    document.addEventListener('visibilitychange', () => {
      if (wakeLock && document.visibilityState === 'hidden') {
        releaseWakeLock(); // Automatically release wake lock when page is hidden
        wakeLockToggle.checked = false; // Update checkbox state
      }
    });

    // Enable wake lock by default when the page loads
    window.addEventListener('load', initializeWakeLock);
</script></body>

</html>