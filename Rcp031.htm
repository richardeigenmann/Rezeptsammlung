<!DOCTYPE HTML>
<html>

<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>K&uuml;rbisw&auml;he Salzig</title>
    <link rel="StyleSheet" href="rcp.css" type="text/css" media="screen">
    <meta name="RCP-Speise-Kategorie" content="Vegetarisch">
    <meta name="RCP-Speise-Kategorie" content="Aus dem Ofen">
    <meta name="RCP-Speise-Kategorie" content="W&auml;hen">
    <meta name="RCP-Zutat" content="Kuchenteig">
    <meta name="RCP-Zutat" content="K&uuml;rbis">
    <meta name="RCP-Zutat" content="Rosinen">
    <meta name="RCP-Zutat" content="Milch">
    <meta name="RCP-Zutat" content="Sauerrahm">
    <meta name="RCP-Zutat" content="Eier">
    <meta name="RCP-Zutat" content="Currypulver">
    <meta name="RCP-Zutat" content="Paniermehl">
    <meta name="RCP-Zutat" content="K&uuml;rbiskerne">
    <meta name="RCP-Bewertung" content="3 Sterne">
    <meta name="RCP-Quelle" content="Herbert Eigenmann">
</head>

<body>
    <h1>K&uuml;rbisw&auml;he Salzig</h1>
    <img src="Rcp031.jpg" alt="K&uuml;rbisw&auml;he Salzig" width="450" height="331">

    <table>
        <tbody>
            <tr>
                <td colspan="2">
                    <strong>Zutaten f&uuml;r 4 Portionen</strong>
                </td>
            </tr>
            <tr>
                <td class="td-qty">250 g</td>
                <td><strong>Kuchenteig</strong></td>
            </tr>
            <tr>
                <td class="td-qty">800 g</td>
                <td><strong>K&uuml;rbis</strong></td>
            </tr>
            <tr>
                <td class="td-qty">100 g</td>
                <td><strong>Rosinen oder Sultaninen</strong></td>
            </tr>
            <tr>
                <td class="td-qty">1 dl</td>
                <td><strong>Milch</strong></td>
            </tr>
            <tr>
                <td class="td-qty">2.5 dl</td>
                <td><strong>Sauerrahm</strong></td>
            </tr>
            <tr>
                <td class="td-qty">3</td>
                <td><strong>Eier</strong></td>
            </tr>
            <tr>
                <td class="td-qty">1 TL</td>
                <td><strong>Currypulver</strong></td>
            </tr>
            <tr>
                <td class="td-qty">1 TL</td>
                <td><strong>Salz</strong></td>
            </tr>
            <tr>
                <td class="td-qty"></td>
                <td><strong>Pfeffer</strong></td>
            </tr>
            <tr>
                <td class="td-qty">2 EL</td>
                <td><strong>Paniermehl</strong></td>
            </tr>
            <tr>
                <td class="td-qty">2 EL</td>
                <td><strong>K&uuml;rbiskerne</strong></td>
            </tr>
        </tbody>
    </table>


    <h2>Zubereitung:</h2>
    <p>Ofen auf 220&deg;C vorheizen.</p>
    <p>30cm W&auml;henblech fetten.</p>
    <p>Kuchenteig auswallen, auf Blech auslegen.</p>
    <p>Salz, Curry, Pfeffer, Paniermehl auf Teigboden streuen.</p>
    <p> K&uuml;rbis sch&auml;len und durch die R&ouml;stiraffel reiben.</p>
    <p>Rosinen oder Sultaninen darunter mischen.</p>
    <p>Milch und Sauerrahm mit Schwingbesen verr&uuml;hren danach mit den Eiern
        unter das K&uuml;rbisfleisch mischen.</p>
    <p>F&uuml;llung verteilen. K&uuml;rbiskerne dar&uuml;ber streuen.</p>
    <p>Bei 220 &#176; im vorgeheiztem Ofen auf unterster Rille 40 Minuten backen.</p>

    <h2>Quelle:</h2>
    <p>Fenner's K&uuml;rbisrezepte, von Herbert erfasst Code: K&Uuml;&Auml;</p>

    <h2>Bewertung:</h2>
    <p>Schmeckte am 18.10.2004 gut. Der K&uuml;rbis war etwas fade. Die Rosinen geben
        dem einen etwas s&uuml;sslichen Geschmack. Das Curry gibt dem Gericht eine
        interessante Note. Es schmeckt heiss aus dem Ofen nicht so toll aber Lauwarm
        sehr gut.</p>
    <p>Siehe auch: <A HREF="Rcp034.htm" TARGET="Receipes"> K&uuml;rbiskuchen Salzig &agrave; la Welsch</A></p>

<p CLASS='linkback'>
    <a href='https://richardeigenmann.github.io/RezeptsammlungNg' target='_parent'>
    Richi's Rezeptsammlung
    </a>
</p>
<label>
    <input type="checkbox" id="wakeLockToggle" checked>
    Wake Lock to prevent screen timeout
</label>
    
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-47341387-3', 'auto');
  ga('send', 'pageview');

    let wakeLock = null; // Variable to hold the wake lock instance
    const statusText = document.getElementById('status');
    const wakeLockToggle = document.getElementById('wakeLockToggle');

    // Function to request a wake lock
    async function requestWakeLock() {
      try {
        wakeLock = await navigator.wakeLock.request('screen');
        //statusText.innerHTML = 'Wake Lock is currently <strong>active</strong>.';

        // Listen for wake lock being released
        wakeLock.addEventListener('release', () => {
          //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
          wakeLockToggle.checked = false; // Update checkbox state
        });

        console.log('Wake Lock activated.');
      } catch (err) {
        console.error(`Failed to acquire wake lock: ${err.message}`);
      }
    }

    // Function to release the wake lock
    function releaseWakeLock() {
      if (wakeLock) {
        wakeLock.release();
        wakeLock = null;
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        console.log('Wake Lock released.');
      }
    }

    // Initialize wake lock on page load
    async function initializeWakeLock() {
      if ('wakeLock' in navigator) {
        await requestWakeLock(); // Enable wake lock by default
      } else {
        //statusText.innerHTML = 'Wake Lock is <strong>not supported</strong> by your browser.';
      }
    }

    // Event listener for the checkbox
    wakeLockToggle.addEventListener('change', () => {
      if (wakeLockToggle.checked) {
        requestWakeLock();
      } else {
        releaseWakeLock();
      }
    });

    // Handle page visibility change
    document.addEventListener('visibilitychange', () => {
      if (wakeLock && document.visibilityState === 'hidden') {
        releaseWakeLock(); // Automatically release wake lock when page is hidden
        wakeLockToggle.checked = false; // Update checkbox state
      }
    });

    // Enable wake lock by default when the page loads
    window.addEventListener('load', initializeWakeLock);
</script>
</body>

</html>