<!DOCTYPE HTML>
<html>

<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>Gugelhopf mit Schokoladenpulver</title>
	<link rel="StyleSheet" href="rcp.css" type="text/css" media="screen">
	<meta name="RCP-Speise-Kategorie" content="Cakes">
	<meta name="RCP-Speise-Kategorie" content="Vegetarisch">
	<meta name="RCP-Zutat" content="Mehl">
	<meta name="RCP-Zutat" content="Butter">
	<meta name="RCP-Zutat" content="Zucker">
	<meta name="RCP-Zutat" content="Eier">
	<meta name="RCP-Zutat" content="Schokoladepulver">
	<meta name="RCP-Zutat" content="Backpulver">
	<meta name="RCP-Zutat" content="Milch">
	<meta name="RCP-Zutat" content="Puderzucker">
	<meta name="RCP-Zutat" content="Paniermehl">
	<meta name="RCP-Bewertung" content="4 Sterne">
	<meta name="RCP-Kochwerkzeug" content="Gugelhopfform">
	<meta name="RCP-Quelle" content="Herbert Eigenmann">
</head>

<body>
	<h1>Gugelhopf mit Schokoladenpulver</h1>
	<img src="Rcp306.jpg" alt="Gugelhopf mit Schokoladenpulver" width="400" height="298">

	<table>
		<tbody>
			<tr>
				<td colspan="2"><strong>Zutaten f&uuml;r 4 Personen:</strong></td>
			</tr>
			<tr>
				<td class="td-qty">450 g</td>
				<td><strong>Mehl</strong></td>
			</tr>
			<tr>
				<td class="td-qty">150 g</td>
				<td><strong>Butter</strong></td>
			</tr>
			<tr>
				<td class="td-qty">250 g</td>
				<td><strong>Zucker</strong></td>
			</tr>
			<tr>
				<td class="td-qty">4</td>
				<td><strong>Eier</strong></td>
			</tr>
			<tr>
				<td class="td-qty">80 g</td>
				<td><strong>Schokoladenpulver</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1 Beutel</td>
				<td><strong>Backpulver</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1 Prise</td>
				<td><strong>Salz</strong></td>
			</tr>
			<tr>
				<td class="td-qty">2,5 dl</td>
				<td><strong>Milch</strong></td>
			</tr>
			<tr>
				<td class="td-qty"></td>
				<td><strong>Paniermehl</strong></td>
			</tr>
			<tr>
				<td class="td-qty"></td>
				<td><strong>Puderzucker</strong></td>
			</tr>
		</tbody>
	</table>

	<h2>Zubereitung:</h2>
	<p>Gugelhopfform 22 cm &Oslash;, 2,5 l Inhalt</p>
	<p>Ofen auf gute Mittelhitze (200&deg;C) vorheizen.</p>
	<p>Form sorgf&auml;ltig befetten und mit Paniermehl ausstreuen.</p>
	<p>Butter, Zucker und Eier schaumig r&uuml;hren.</p>
	<p>Mehl, Schokoladenpulver, Backpulver und Salz dazu sieben. Milch beif&uuml;gen. Alle Zutaten gut mischen und in
		die Form f&uuml;llen.</p>
	<p>45-55 Minuten backen.</p>
	<p>Ausk&uuml;hlen lassen.</p>
	<p>Vor dem Servieren mit Puderzucker besieben.</p>


	<h2>Tipp:</h2>
	<p>Wer will, kann in die befettete, ausgestreute Form in jede Rille eine ganze gesch&auml;lte Mandel legen. Nach dem
		Backen wird das &uuml;bersch&uuml;ssige Paniermehl auf den Mandeln entfernt.</p>
	<p>Man kann den Gugelhopf auch glasieren: Gugelhopf mit 3 EL Aprikosenkonfit&uuml;re bestreichen oder 100 g
		Blockschokolade mit 3 EL Wasser schmelzen; 60 g Puderzucker und 50 g Butter oder Margarine dazugeben. Glatt
		r&uuml;hren. Gugelhopf damit &uuml;berziehen.</p>
	<p>Eine weitere Variante: Dem Teig k&ouml;nnen 40 g fein gehacktes Orangeat beigef&uuml;gt werden.</p>

	<h2>Quelle:</h2>
	<p>Herbert Eigenmann, Code: GGS</p>

	<h2>Bewertung:</h2>
	<p>Gelang am 13.12.2008 mit G&ouml;ttibub Luis (6) ganz gut. Das Resultat haut auch allen gut geschmeckt. Es gibt
		etwas viel Masse f&uuml;r meine Form, weshalb es oben herausquoll. Auch war bei mir die Kochzeit deutlich
		k&uuml;rzer als die im Rezept angegebenen 60-75 Minuten, weshalb ich das jetzt auf 45-55 Minuten verk&uuml;rzt
		habe.</p>

<p CLASS='linkback'>
    <a href='https://richardeigenmann.github.io/RezeptsammlungNg' target='_parent'>
    Richi's Rezeptsammlung
    </a>
</p>
<label>
    <input type="checkbox" id="wakeLockToggle" checked>
    Wake Lock to prevent screen timeout
</label>
    
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-47341387-3', 'auto');
  ga('send', 'pageview');

    let wakeLock = null; // Variable to hold the wake lock instance
    const statusText = document.getElementById('status');
    const wakeLockToggle = document.getElementById('wakeLockToggle');

    // Function to request a wake lock
    async function requestWakeLock() {
      try {
        wakeLock = await navigator.wakeLock.request('screen');
        //statusText.innerHTML = 'Wake Lock is currently <strong>active</strong>.';

        // Listen for wake lock being released
        wakeLock.addEventListener('release', () => {
          //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
          wakeLockToggle.checked = false; // Update checkbox state
        });

        console.log('Wake Lock activated.');
      } catch (err) {
        console.error(`Failed to acquire wake lock: ${err.message}`);
      }
    }

    // Function to release the wake lock
    function releaseWakeLock() {
      if (wakeLock) {
        wakeLock.release();
        wakeLock = null;
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        console.log('Wake Lock released.');
      }
    }

    // Initialize wake lock on page load
    async function initializeWakeLock() {
      if ('wakeLock' in navigator) {
        await requestWakeLock(); // Enable wake lock by default
      } else {
        //statusText.innerHTML = 'Wake Lock is <strong>not supported</strong> by your browser.';
      }
    }

    // Event listener for the checkbox
    wakeLockToggle.addEventListener('change', () => {
      if (wakeLockToggle.checked) {
        requestWakeLock();
      } else {
        releaseWakeLock();
      }
    });

    // Handle page visibility change
    document.addEventListener('visibilitychange', () => {
      if (wakeLock && document.visibilityState === 'hidden') {
        releaseWakeLock(); // Automatically release wake lock when page is hidden
        wakeLockToggle.checked = false; // Update checkbox state
      }
    });

    // Enable wake lock by default when the page loads
    window.addEventListener('load', initializeWakeLock);
</script>
</body>

</html>