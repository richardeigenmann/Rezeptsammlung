<!DOCTYPE HTML>
<html>

<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>Dorschfilets mit Oliven-Vinaigrette</title>
	<link rel="StyleSheet" href="rcp.css" type="text/css" media="screen">
	<meta name="RCP-Speise-Kategorie" content="Fischgerichte">
	<meta name="RCP-Speise-Kategorie" content="Hauptgerichte">
	<meta name="RCP-Zutat" content="Zitronen">
	<meta name="RCP-Zutat" content="Oliven&ouml;l">
	<meta name="RCP-Zutat" content="Schwarze Oliven">
	<meta name="RCP-Zutat" content="Kapern">
	<meta name="RCP-Zutat" content="Petersilie">
	<meta name="RCP-Zutat" content="Mehl">
	<meta name="RCP-Zutat" content="Dorschfilets">
	<meta name="RCP-Zutat" content="Wildreis">
	<meta name="RCP-Bewertung" content="4 Sterne">
	<meta name="RCP-Quelle" content="Betty Bossi">
</head>

<body>
	<h1>Dorschfilets mit Oliven-Vinaigrette</h1>
	<img src="Rcp454.jpg" alt="Dorschfilets mit Oliven-Vinaigrette" width="400" height="313">

	<table>
		<tbody>
			<tr>
				<td colspan="2"><strong>Zutaten f&uuml;r 2 Personen:</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1/2</td>
				<td><strong>Zitrone</strong></td>
			</tr>
			<tr>
				<td class="td-qty">2 El</td>
				<td><strong>Oliven&ouml;l</strong></td>
			</tr>
			<tr>
				<td class="td-qty">50 g</td>
				<td>entsteinte <strong>schwarze Oliven</strong></td>
			</tr>
			<tr>
				<td class="td-qty">25 g</td>
				<td><strong>Kapern&auml;pfel</strong> oder <strong>Kapern</strong></td>
			</tr>
			<tr>
				<td class="td-qty">2 El</td>
				<td><strong>Petersilie</strong></td>
			</tr>
			<tr>
				<td class="td-qty">nach Bedarf</td>
				<td><strong>Salz, Pfeffer aus der M&uuml;hle</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1 El</td>
				<td><strong>Mehl</strong></td>
			</tr>
			<tr>
				<td class="td-qty">2</td>
				<td><strong>Dorschfilets</strong> (je ca. 100g)</td>
			</tr>
			<tr>
				<td class="td-qty">1/4 Tl</td>
				<td><strong>Salz</strong></td>
			</tr>
			<tr>
				<td class="td-qty">2 Portionen</td>
				<td><strong>Wildreis-Mischung</strong></td>
			</tr>
		</tbody>
	</table>

	<h2>Zubereitung:</h2>
	<p>Vor- und zubereiten: ca. 30 Minuten.</p>
	<p>Den Wildreis nach Packungsangabe zubereiten.</p>
	<p>Zitronenschale abraffeln und die halbe Zitrone auspressen. Oliven&ouml;l zugeben.</p>
	<p>Die Oliven vierteilen und zugeben. Die Kapern&auml;pfel l&auml;ngs halbieren und zugeben.</p>
	<p>Petersilie hacken und zugeben.</p>
	<p>Nach Bedarf Salz und Pfeffer aus der M&uuml;hle zugeben. Die Vinaigrette jetzt zugedeckt beiseite stellen.</p>
	<p>Die Fischfilets mit einem Viertel Teel&ouml;ffel salzen und im Mehl wenden.</p>
	<p>Die Fischfilets in Oliven&ouml;l in einer Bratpfanne beidseitig je ca. 4 Minuten braten.</p>
	<p>Die Teller vorw&auml;rmen. Reis und Fischfilets anrichten, den Fisch mit der Vinaigrette betr&auml;ufeln.</p>


	<h2>Quelle:</h2>
	<p>Betty Bossi Buch "Kochvergn&uuml;gen f&uuml;r Zwei", 2002, Seite 21</p>

	<h2>Bewertung:</h2>
	<p>Schmeckt sehr gut! RE 31.12.2010</p>

<p CLASS='linkback'>
    <a href='https://richardeigenmann.github.io/RezeptsammlungNg' target='_parent'>
    Richi's Rezeptsammlung
    </a>
</p>
<label>
    <input type="checkbox" id="wakeLockToggle" checked>
    Wake Lock to prevent screen timeout
</label>
    
<script async src="https://www.googletagmanager.com/gtag/js?id=G-XWT8EWS5BN"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-XWT8EWS5BN');
  // Function to request a wake lock
  async function requestWakeLock() {
      try {
        wakeLock = await navigator.wakeLock.request('screen');
        //statusText.innerHTML = 'Wake Lock is currently <strong>active</strong>.';

        // Listen for wake lock being released
        wakeLock.addEventListener('release', () => {
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        wakeLockToggle.checked = false; // Update checkbox state
        });

        console.log('Wake Lock activated.');
      } catch (err) {
        console.error(`Failed to acquire wake lock: ${err.message}`);
      }
    }

  // Function to release the wake lock
  function releaseWakeLock() {
      if (wakeLock) {
        wakeLock.release();
        wakeLock = null;
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        console.log('Wake Lock released.');
      }
    }

  // Initialize wake lock on page load
  async function initializeWakeLock() {
      if ('wakeLock' in navigator) {
          await requestWakeLock(); // Enable wake lock by default
      } else {
        //statusText.innerHTML = 'Wake Lock is <strong>not supported</strong> by your browser.';
      }
  }

    // Event listener for the checkbox
    wakeLockToggle.addEventListener('change', () => {
      if (wakeLockToggle.checked) {
    requestWakeLock();
      } else {
    releaseWakeLock();
      }
    });

    // Handle page visibility change
    document.addEventListener('visibilitychange', () => {
      if (wakeLock && document.visibilityState === 'hidden') {
    releaseWakeLock(); // Automatically release wake lock when page is hidden
  wakeLockToggle.checked = false; // Update checkbox state
      }
    });

  // Enable wake lock by default when the page loads
  window.addEventListener('load', initializeWakeLock);
</script>
</body>

</html>