<!DOCTYPE HTML>
<html>
<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1">
	<title>Ricottino</title>
	<link rel="StyleSheet" href="rcp.css" type="text/css" media="screen">
	<meta name="RCP-Speise-Kategorie" content="Desserts">
	<meta name="RCP-Speise-Kategorie" content="Vegetarisch">
	<meta name="RCP-Zutat" content="Marrons Glaces">
	<meta name="RCP-Zutat" content="Kandierte Fr&uuml;chte">
	<meta name="RCP-Zutat" content="Marascino">
	<meta name="RCP-Zutat" content="Speisequark">
	<meta name="RCP-Zutat" content="Rahm">
	<meta name="RCP-Zutat" content="Puderzucker">
	<meta name="RCP-Bewertung" content="4 Sterne">
	<meta name="RCP-Quelle" content="Herbert Eigenmann">
</head>
<body>
<h1>Ricottino</h1>
<img src="Rcp237.jpg" alt="Ricottino" width="400" height="326">

<table>
   <tbody>
	<tr>
		<td colspan="2"><strong>Zutaten f&uuml;r 4 Personen:</strong></td>
	</tr>
	<tr>
		<td class="td-qty">100 g</td>
		<td><strong>Marrons glac&eacute;s</strong></td>
	</tr>
	<tr>
		<td class="td-qty">50 g</td>
		<td><strong>kandierte Fr&uuml;chte</strong></td>
	</tr>
	<tr>
		<td class="td-qty">2 EL</td>
		<td><strong>Maraschino</strong></td>
	</tr>
	<tr>
		<td class="td-qty">450 g</td>
		<td><strong>Speisequark</strong></td>
	</tr>
	<tr>
		<td class="td-qty">2 EL</td>
		<td><strong>Rahm</strong></td>
	</tr>
	<tr>
		<td class="td-qty">100 g</td>
		<td><strong>Puderzucker</strong></td>
	</tr>
  </tbody>
</table>

<h2>Zubereitung:</h2>
<p>Zubereitungszeit: 15 Minuten
<br>K&uuml;hlzeit: 3 Stunden</p>
<p>Marrons glac&eacute;s zerbr&ouml;ckeln und mit kandierten Fr&uuml;chten in Maraschino einlegen. Quark gut ausdr&uuml;cken. Alle Zutaten vermischen und in Gl&auml;ser einf&uuml;llen. 3 Stunden in den K&uuml;hlschrank stellen. Nach Belieben mit Quark- oder Rahmrosetten und kandierten Fr&uuml;chten garnieren</p>

<h2>Kalorien</h2>
<p>Pro Person: 334 kcal, 1396 Joule</p>

<h2>Quelle:</h2>
<p>Herbert Eigenmann, Code: KNR</p>
<p><a href="http://en.wikipedia.org/wiki/Marron_glac%C3%A9">Wikipedia Artikel Marron Glac&eacut;</a></p>

<h2>Bewertung:</h2>
<p>Hat wunderbar geschmeckt. Der Maraschino Lik&ouml;r ist aber unabdingbar! Ich habe Marronip&uuml;ree gekauft statt Marrons glac&eacute;s welches die gekochten gefrorenen Kastanien sind. Ich habe dann von meinem Marroniblock St&uuml;ckchen abgehauen. Als kandierte Fr&uuml;chte gab es kandierte Ananas. Ergab eine sehr s&uuml;sse Art Creme. Sehr fein! RE 21.3.2009</p>

<p CLASS='linkback'>
    <a href='https:\/\/richardeigenmann.github.io\/RezeptsammlungNg' target='_parent'>
    Richi's Rezeptsammlung
    </a>
</p>
<label>
    <input type="checkbox" id="wakeLockToggle" checked>
    Wake Lock to prevent screen timeout
</label>
    <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-47341387-3', 'auto');
  ga('send', 'pageview');

    let wakeLock = null; // Variable to hold the wake lock instance
    const statusText = document.getElementById('status');
    const wakeLockToggle = document.getElementById('wakeLockToggle');

    // Function to request a wake lock
    async function requestWakeLock() {
      try {
        wakeLock = await navigator.wakeLock.request('screen');
        //statusText.innerHTML = 'Wake Lock is currently <strong>active</strong>.';

        // Listen for wake lock being released
        wakeLock.addEventListener('release', () => {
          //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
          wakeLockToggle.checked = false; // Update checkbox state
        });

        console.log('Wake Lock activated.');
      } catch (err) {
        console.error(`Failed to acquire wake lock: ${err.message}`);
      }
    }

    // Function to release the wake lock
    function releaseWakeLock() {
      if (wakeLock) {
        wakeLock.release();
        wakeLock = null;
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        console.log('Wake Lock released.');
      }
    }

    // Initialize wake lock on page load
    async function initializeWakeLock() {
      if ('wakeLock' in navigator) {
        await requestWakeLock(); // Enable wake lock by default
      } else {
        //statusText.innerHTML = 'Wake Lock is <strong>not supported</strong> by your browser.';
      }
    }

    // Event listener for the checkbox
    wakeLockToggle.addEventListener('change', () => {
      if (wakeLockToggle.checked) {
        requestWakeLock();
      } else {
        releaseWakeLock();
      }
    });

    // Handle page visibility change
    document.addEventListener('visibilitychange', () => {
      if (wakeLock && document.visibilityState === 'hidden') {
        releaseWakeLock(); // Automatically release wake lock when page is hidden
        wakeLockToggle.checked = false; // Update checkbox state
      }
    });

    // Enable wake lock by default when the page loads
    window.addEventListener('load', initializeWakeLock);
</script>
</body>
</html>
