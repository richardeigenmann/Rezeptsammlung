<!DOCTYPE HTML>
<html>

<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>Brownies</title>
	<link rel="StyleSheet" href="rcp.css" type="text/css" media="screen">
	<meta name="RCP-Speise-Kategorie" content="Guetzli">
	<meta name="RCP-Speise-Kategorie" content="Desserts">
	<meta name="RCP-Speise-Kategorie" content="Vegetarisch">
	<meta name="RCP-Region" content="Amerikanisch">
	<meta name="RCP-Zutat" content="Margarine">
	<meta name="RCP-Zutat" content="Kochschokolade">
	<meta name="RCP-Zutat" content="Zucker">
	<meta name="RCP-Zutat" content="Eier">
	<meta name="RCP-Zutat" content="Vanillezucker">
	<meta name="RCP-Zutat" content="Mehl">
	<meta name="RCP-Zutat" content="Baumn&uuml;sse">
	<meta name="RCP-Bewertung" content="4 Sterne">
	<meta name="RCP-Quelle" content="Claudia H&auml;fliger">
</head>

<body>
	<h1>Brownies</h1>
	<img src="Rcp470.jpg" alt="Brownies" width="400" height="266">

	<table>
		<tbody>
			<tr>
				<td colspan="2"><strong>Zutaten:</strong></td>
			</tr>
			<tr>
				<td class="td-qty">120 g</td>
				<td><strong>Margarine</strong></td>
			</tr>
			<tr>
				<td class="td-qty">175 g</td>
				<td><strong>Kochschokolade</strong></td>
			</tr>
			<tr>
				<td class="td-qty">220 g</td>
				<td><strong>Zucker</strong></td>
			</tr>
			<tr>
				<td class="td-qty">2</td>
				<td><strong>Eier</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1 Prise</td>
				<td><strong>Salz</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1/2 P&auml;ckli</td>
				<td><strong>Vanillezucker</strong></td>
			</tr>
			<tr>
				<td class="td-qty">120 g</td>
				<td><strong>Mehl</strong></td>
			</tr>
			<tr>
				<td class="td-qty">150 g</td>
				<td><strong>Baumn&uuml;sse, grob gehackt</strong></td>
			</tr>
		</tbody>
	</table>

	<h2>Zubereitung:</h2>
	<p>Margarine in einer Pfanne schmelzen.</p>
	<p>Kochschokolade beigeben, schmelzen, vom Feuer nehmen</p>
	<p>Zucker beigeben, mischen</p>
	<p>Eier, Prise Salz, Vanillezucker beigeben, alles kurz verr&uuml;hren</p>
	<p>Mehl, Baumn&uuml;sse, grob gehackt beigeben, mischen</p>
	<p>Masse in die mit Backtrennpapier ausgekleidete Carr&#233; Form (23x23cm) einf&uuml;llen, glatt streichen</p>
	<p>Backen: 30 -40 Minuten bei guter Mittelhitze (200-220&deg;) auf der zweituntersten
		Rille des vorgeheizten Ofens. ( Ev 10 Minuten vor Schluss nur noch mit
		Unterhitze backen) Noch heiss in die gew&uuml;nschte W&uuml;rfelgr&ouml;sse schneiden.</p>

	<h2>Tipp:</h2>
	<p>Ganz frisch gegessen, wie es die Amerikaner tun, schmecken die Brownies
		wie Schokoladencake. Sie sollten innen noch feucht sein. Bei l&auml;ngerer
		Lagerung werden sie etwas trockener und h&auml;rter, jedoch nicht schlechter.</p>


	<h2>Quelle:</h2>
	<p>Claudia H&auml;fliger</p>
	<p>"Ich habe jeweils die doppelte Portion gemacht und auf einem kleineren
		Kuchenblech ausgestrichen. Das gibt gleich viel Arbeit."</p>

	<h2>Bewertung:</h2>
	<p>Von Sandra am 7.9.2005: Schmecken hervorragend....gef&auml;hrlich gut!</p>
	<p>Am 14.11.2009 habe ich meine Brownies vielleicht eine Minute zu lange gebacken. Die doppelte Menge passt gut auf
		mein Betty Bossi Hochrand Backblech. Da sie aber anschliessend kleben w&auml;re ein Backtrennpapier vermutlich
		ganz gut. Schmecken sehr fein. RE</p>

<p CLASS='linkback'>
    <a href='https://richardeigenmann.github.io/RezeptsammlungNg' target='_parent'>
    Richi's Rezeptsammlung
    </a>
</p>
<label>
    <input type="checkbox" id="wakeLockToggle" checked>
    Wake Lock to prevent screen timeout
</label>
    
<script async src="https://www.googletagmanager.com/gtag/js?id=G-XWT8EWS5BN"></script>
<script>
  // Function to request a wake lock
  async function requestWakeLock() {
      try {
        wakeLock = await navigator.wakeLock.request('screen');
        //statusText.innerHTML = 'Wake Lock is currently <strong>active</strong>.';

        // Listen for wake lock being released
        wakeLock.addEventListener('release', () => {
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        wakeLockToggle.checked = false; // Update checkbox state
        });

        console.log('Wake Lock activated.');
      } catch (err) {
        console.error(`Failed to acquire wake lock: ${err.message}`);
      }
    }

  // Function to release the wake lock
  function releaseWakeLock() {
      if (wakeLock) {
        wakeLock.release();
        wakeLock = null;
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        console.log('Wake Lock released.');
      }
    }

  // Initialize wake lock on page load
  async function initializeWakeLock() {
      if ('wakeLock' in navigator) {
          await requestWakeLock(); // Enable wake lock by default
      } else {
        //statusText.innerHTML = 'Wake Lock is <strong>not supported</strong> by your browser.';
      }
  }

    // Event listener for the checkbox
    wakeLockToggle.addEventListener('change', () => {
      if (wakeLockToggle.checked) {
    requestWakeLock();
      } else {
    releaseWakeLock();
      }
    });

    // Handle page visibility change
    document.addEventListener('visibilitychange', () => {
      if (wakeLock && document.visibilityState === 'hidden') {
    releaseWakeLock(); // Automatically release wake lock when page is hidden
  wakeLockToggle.checked = false; // Update checkbox state
      }
    });

  // Enable wake lock by default when the page loads
  window.addEventListener('load', initializeWakeLock);
</script>
</body>

</html>