<!DOCTYPE HTML>
<html>

<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>Reis aus dem Dampfkochtopf</title>
	<link rel="StyleSheet" href="rcp.css" type="text/css" media="screen">
	<meta name="RCP-Kochwerkzeug" content="Dampfkochtopf">
	<meta name="RCP-Speise-Kategorie" content="Beilagen">
	<meta name="RCP-Speise-Kategorie" content="Reisgerichte">
	<meta name="RCP-Zutat" content="Reis">
	<meta name="RCP-Quelle" content="Kuhn Rikon">
	<meta name="RCP-Bewertung" content="4 Sterne">
</head>
<h1>Reis aus dem Dampfkochtopf</h1>
<img src="Rcp362.jpg" alt="Reis aus dem Dampfkochtopf" width="400" height="379">

<table>
	<tbody>
		<tr>
			<td colspan="2"><strong>Zutaten f&uuml;r 1 Person:</strong></td>
		</tr>
		<tr>
			<td class="td-qty">1 Becher</td>
			<td><strong>Reis</strong></td>
		</tr>
		<tr>
			<td class="td-qty">1,5 Becher</td>
			<td><strong>Wasser</strong></td>
		</tr>
		<tr>
			<td class="td-qty">1/2 TL</td>
			<td><strong>Salz</strong></td>
		</tr>
	</tbody>
</table>

<h2>Zubereitung:</h2>
<P>Zubereitung: Genau 6 Minuten auf dem 1. roten Ring kochen.</P>
<P>Die Kochzeit beginnt sobald der Ring sichtbar wird. Anschliessend sofort vom Herd nehmen und beiseite stellen.
	Servieren, sobald der Deckel sich &ouml;ffnen l&auml;sst.</P>
<p>Siehe auch: <A HREF="Rcp141.htm" TARGET="Receipes">Spaghetti im Dampfkochtopf</A></P>

<h2>Quelle:</h2>
<p>Seite 46, Einfaches und Raffiniertes aus dem Schnellkochtopf, Kuhn Rikon, 1980</p>

<h2>Bewertung:</h2>
<p>Funktioniert gut wenn man sich genau an das Rezept h&auml;lt</p>

<p CLASS='linkback'>
    <a href='https://richardeigenmann.github.io/RezeptsammlungNg' target='_parent'>
    Richi's Rezeptsammlung
    </a>
</p>
<label>
    <input type="checkbox" id="wakeLockToggle" checked>
    Wake Lock to prevent screen timeout
</label>
    
<script async src="https://www.googletagmanager.com/gtag/js?id=G-XWT8EWS5BN"></script>
<script>
  // Function to request a wake lock
  async function requestWakeLock() {
      try {
        wakeLock = await navigator.wakeLock.request('screen');
        //statusText.innerHTML = 'Wake Lock is currently <strong>active</strong>.';

        // Listen for wake lock being released
        wakeLock.addEventListener('release', () => {
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        wakeLockToggle.checked = false; // Update checkbox state
        });

        console.log('Wake Lock activated.');
      } catch (err) {
        console.error(`Failed to acquire wake lock: ${err.message}`);
      }
    }

  // Function to release the wake lock
  function releaseWakeLock() {
      if (wakeLock) {
        wakeLock.release();
        wakeLock = null;
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        console.log('Wake Lock released.');
      }
    }

  // Initialize wake lock on page load
  async function initializeWakeLock() {
      if ('wakeLock' in navigator) {
          await requestWakeLock(); // Enable wake lock by default
      } else {
        //statusText.innerHTML = 'Wake Lock is <strong>not supported</strong> by your browser.';
      }
  }

    // Event listener for the checkbox
    wakeLockToggle.addEventListener('change', () => {
      if (wakeLockToggle.checked) {
    requestWakeLock();
      } else {
    releaseWakeLock();
      }
    });

    // Handle page visibility change
    document.addEventListener('visibilitychange', () => {
      if (wakeLock && document.visibilityState === 'hidden') {
    releaseWakeLock(); // Automatically release wake lock when page is hidden
  wakeLockToggle.checked = false; // Update checkbox state
      }
    });

  // Enable wake lock by default when the page loads
  window.addEventListener('load', initializeWakeLock);
</script>