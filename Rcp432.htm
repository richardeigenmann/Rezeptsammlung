<!DOCTYPE HTML>
<html>

<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Gem&uuml;seauflauf mit K&auml;se</title>
  <link rel="StyleSheet" href="rcp.css" type="text/css" media="screen">
  <meta name="RCP-Speise-Kategorie" content="Aus dem Ofen">
  <meta name="RCP-Speise-Kategorie" content="Leichtes Nachtessen">
  <meta name="RCP-Speise-Kategorie" content="Vegetarisch">
  <meta name="RCP-Speise-Kategorie" content="Beilagen">
  <meta name="RCP-Zutat" content="Peperoni">
  <meta name="RCP-Zutat" content="R&uuml;ebli">
  <meta name="RCP-Zutat" content="Blumenkohl">
  <meta name="RCP-Zutat" content="Broccoli">
  <meta name="RCP-Zutat" content="Schlagrahm">
  <meta name="RCP-Zutat" content="Milch">
  <meta name="RCP-Zutat" content="Eier">
  <meta name="RCP-Zutat" content="Reibk&auml;se">
  <meta name="RCP-Zutat" content="Muskatnuss">
  <meta name="RCP-Zutat" content="Zwiebeln">
  <meta name="RCP-Zutat" content="Butter">
  <meta name="RCP-Zutat" content="Paniermehl">
  <meta name="RCP-Bewertung" content="4 Sterne">
  <meta name="RCP-Quelle" content="Werbebrosch&uuml;re">
</head>

<body>
  <h1>Gem&uuml;seauflauf mit K&auml;se</h1>
  <img src="Rcp432.jpg" alt="Gem&uuml;seauflauf mit K&auml;se" width="400" height="275">

  <table>
    <tbody>
      <tr>
        <td colspan="2"><strong>Zutaten f&uuml;r 4-6 Portionen</strong></td>
      </tr>
      <tr>
        <td class="td-qty">1</td>
        <td>rote <strong>Peperoni</strong></td>
      </tr>
      <tr>
        <td class="td-qty">1 kg</td>
        <td><strong>Gem&uuml;se</strong> (R&uuml;ebli, Blumenkohl, Broccoli)</td>
      </tr>
      <tr>
        <td class="td-qty">2 dl</td>
        <td><strong>Schlagrahm</strong></td>
      </tr>
      <tr>
        <td class="td-qty">2 dl</td>
        <td><strong>Milch</strong></td>
      </tr>
      <tr>
        <td class="td-qty">4</td>
        <td><strong>Eier</strong></td>
      </tr>
      <tr>
        <td class="td-qty">150 g</td>
        <td>geriebener <strong>K&auml;se</strong> (z.B. Emmentaler)</td>
      </tr>
      <tr>
        <td class="td-qty"></td>
        <td><strong>Salz, Pfeffer</strong></td>
      </tr>
      <tr>
        <td class="td-qty"></td>
        <td>geriebene <strong>Muskatnuss</strong></td>
      </tr>
      <tr>
        <td class="td-qty">2</td>
        <td><strong>Zwiebeln</strong></td>
      </tr>
      <tr>
        <td class="td-qty">2 El</td>
        <td><strong>Butter</strong></td>
      </tr>
      <tr>
        <td class="td-qty">2 El</td>
        <td><strong>Paniermehl</strong></td>
      </tr>
    </tbody>
  </table>


  <h2>Zubereitung:</h2>
  <p>R&uuml;sten: 15 Minuten<br>
    Backen: 35-40 Minuten</p>
  <p>Backofen auf 200&deg;C vorheizen.</p>
  <p>Eine flache Auflaufform fetten.</p>
  <p>Peperoni putzen, waschen und in Streifen schneiden. Gem&uuml;se waschen und putzen. Die R&uuml;ebli in Scheiben
    schneiden, Blumenkohl und Broccoli in R&ouml;schen teilen. In die Gratinform geben.</p>
  <p>Rahm, Milch, Eier und die H&auml;lfte des K&auml;ses verquirlen. Mit Salz, Pfeffer und Muskat abschmecken. Ueber
    das vorbereitete Gem&uuml;se giessen und mischen.</p>
  <p>Zwiebeln sch&auml;len und in Ringe schneiden. In einer Pfanne die Butter zerlassen, Paniermehl untermischen.
    Zwiebelringe in den Br&ouml;seln wenden.</p>
  <p>Im Ofen (Gas 3; Umluft 180&deg;C) zun&auml;chst 20 Minuten backen.</p>
  <p>Dann die panierten Zwiebelringe auf dem Auflauf verteilen, den restlichen K&auml;se dar&uuml;ber streuen. Weitere
    15-20 Minuten backen, bis die Oberfl&auml;che goldbraun ist.</p>

  <h2>Quelle:</h2>
  <p>Als Werbung versandte Rezeptkarten.</p>

  <h2>Bewertung:</h2>
  <p>Schmeckt eigentlich ganz gut. Ich habe gerne den K&auml;sebiss vom K&auml;se im Guss. RE 27.10.2007</p>

<p CLASS='linkback'>
    <a href='https://richardeigenmann.github.io/RezeptsammlungNg' target='_parent'>
    Richi's Rezeptsammlung
    </a>
</p>
<label>
    <input type="checkbox" id="wakeLockToggle" checked>
    Wake Lock to prevent screen timeout
</label>
    
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-47341387-3', 'auto');
  ga('send', 'pageview');

    let wakeLock = null; // Variable to hold the wake lock instance
    const statusText = document.getElementById('status');
    const wakeLockToggle = document.getElementById('wakeLockToggle');

    // Function to request a wake lock
    async function requestWakeLock() {
      try {
        wakeLock = await navigator.wakeLock.request('screen');
        //statusText.innerHTML = 'Wake Lock is currently <strong>active</strong>.';

        // Listen for wake lock being released
        wakeLock.addEventListener('release', () => {
          //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
          wakeLockToggle.checked = false; // Update checkbox state
        });

        console.log('Wake Lock activated.');
      } catch (err) {
        console.error(`Failed to acquire wake lock: ${err.message}`);
      }
    }

    // Function to release the wake lock
    function releaseWakeLock() {
      if (wakeLock) {
        wakeLock.release();
        wakeLock = null;
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        console.log('Wake Lock released.');
      }
    }

    // Initialize wake lock on page load
    async function initializeWakeLock() {
      if ('wakeLock' in navigator) {
        await requestWakeLock(); // Enable wake lock by default
      } else {
        //statusText.innerHTML = 'Wake Lock is <strong>not supported</strong> by your browser.';
      }
    }

    // Event listener for the checkbox
    wakeLockToggle.addEventListener('change', () => {
      if (wakeLockToggle.checked) {
        requestWakeLock();
      } else {
        releaseWakeLock();
      }
    });

    // Handle page visibility change
    document.addEventListener('visibilitychange', () => {
      if (wakeLock && document.visibilityState === 'hidden') {
        releaseWakeLock(); // Automatically release wake lock when page is hidden
        wakeLockToggle.checked = false; // Update checkbox state
      }
    });

    // Enable wake lock by default when the page loads
    window.addEventListener('load', initializeWakeLock);
</script></body>

</html>