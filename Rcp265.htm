<!DOCTYPE HTML>
<html>

<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>Schokoladenkuchen mit Erdbeer-Garnitur</title>
	<link rel="StyleSheet" href="rcp.css" type="text/css" media="screen">
	<meta name="RCP-Speise-Kategorie" content="Desserts">
	<meta name="RCP-Speise-Kategorie" content="Vegetarisch">
	<meta name="RCP-Speise-Kategorie" content="Aus dem Ofen">
	<meta name="RCP-Speise-Kategorie" content="Cakes">
	<meta name="RCP-Speise-Kategorie" content="Torten">
	<meta name="RCP-Zutat" content="Eier">
	<meta name="RCP-Zutat" content="Zucker">
	<meta name="RCP-Zutat" content="Gemahlene Mandeln">
	<meta name="RCP-Zutat" content="Schokolade">
	<meta name="RCP-Zutat" content="Paniermehl">
	<meta name="RCP-Zutat" content="Zitronensaft">
	<meta name="RCP-Zutat" content="Erdbeeren">
	<meta name="RCP-Zutat" content="Schlagrahm">
	<meta name="RCP-Bewertung" content="4 Sterne">
	<meta name="RCP-Kochwerkzeug" content="Springform 26cm">
	<meta name="RCP-Quelle" content="Herbert Eigenmann">
</head>

<body>
	<h1>Schokoladenkuchen mit Erdbeer-Garnitur</h1>
	<img src="Rcp265.jpg" alt="Schokoladenkuchen mit Erdbeer-Garnitur" width="400" height="325">

	<table>
		<tbody>
			<tr>
				<td colspan="2"><strong>Zutaten f&uuml;r 4 Personen:</strong></td>
			</tr>
			<tr>
				<td class="td-qty">3</td>
				<td><strong>Eier</strong></td>
			</tr>
			<tr>
				<td class="td-qty">125 g</td>
				<td><strong>Zucker</strong></td>
			</tr>
			<tr>
				<td class="td-qty">100 g</td>
				<td><strong>Mandlen gerieben</strong></td>
			</tr>
			<tr>
				<td class="td-qty">100 g</td>
				<td><strong>Bitterschokolade</strong></td>
			</tr>
			<tr>
				<td class="td-qty"></td>
				<td><strong>Paniermehl</strong></td>
			</tr>
			<tr>
				<td class="td-qty"></td>
				<td><strong>Zitronensaft</strong></td>
			</tr>
			<tr>
				<td class="td-qty">250 g</td>
				<td><strong>Erdbeeren</strong></td>
			</tr>
			<tr>
				<td class="td-qty">2 dl</td>
				<td><strong>Schlagrahm</strong></td>
			</tr>
		</tbody>
	</table>

	<h2>Zubereitung:</h2>
	<p>Ofen auf 180&deg;C vorheizen.</p>
	<p>Schokolade schmelzen.</p>
	<p>Zucker mit den Eiern, den gemahlenen Mandeln und der geschmolzenen Bitterschokolade verr&uuml;hren. Masse in
		gefettete und mit Paniermehl bestreute Springform f&uuml;llen und bei 180&deg;C 30 - 40 Minuten backen.</p>
	<p>Nach dem Erkalten belegt man das Biskuit mit Erdbeeren, die man zuvor mit Zucker und etwas Zitronensaft mariniert
		hat, und garniert mit Schlagrahm.</p>

	<h2>Quelle:</h2>
	<p>Herbert Eigenmann, Code: ERB</p>

	<h2>Bewertung:</h2>
	<p>Am 23.2.2008 zubereitet. Ist recht einfach. Ich habe meine 22cm Springform verwendet. Die war vielleicht etwas
		klein. Dadurch wurde der Teig etwas dicker und war noch etwas feucht was ganz gut war aber vielleicht nicht ganz
		im Sinn des Erfinders. Die Familie Eigenmann bewertet das Resultat einstimmig mit 4 Sternen.</p>

	<p>Hat auch im Feb 2013 toll geschmeckt. Ist super einfach zuzubereiten und klebt kaum an der Springform.</p>

<p CLASS='linkback'>
    <a href='https:\/\/richardeigenmann.github.io\/RezeptsammlungNg' target='_parent'>
    Richi's Rezeptsammlung
    </a>
</p>
<label>
    <input type="checkbox" id="wakeLockToggle" checked>
    Wake Lock to prevent screen timeout
</label>
    <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-47341387-3', 'auto');
  ga('send', 'pageview');

    let wakeLock = null; // Variable to hold the wake lock instance
    const statusText = document.getElementById('status');
    const wakeLockToggle = document.getElementById('wakeLockToggle');

    // Function to request a wake lock
    async function requestWakeLock() {
      try {
        wakeLock = await navigator.wakeLock.request('screen');
        //statusText.innerHTML = 'Wake Lock is currently <strong>active</strong>.';

        // Listen for wake lock being released
        wakeLock.addEventListener('release', () => {
          //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
          wakeLockToggle.checked = false; // Update checkbox state
        });

        console.log('Wake Lock activated.');
      } catch (err) {
        console.error(`Failed to acquire wake lock: ${err.message}`);
      }
    }

    // Function to release the wake lock
    function releaseWakeLock() {
      if (wakeLock) {
        wakeLock.release();
        wakeLock = null;
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        console.log('Wake Lock released.');
      }
    }

    // Initialize wake lock on page load
    async function initializeWakeLock() {
      if ('wakeLock' in navigator) {
        await requestWakeLock(); // Enable wake lock by default
      } else {
        //statusText.innerHTML = 'Wake Lock is <strong>not supported</strong> by your browser.';
      }
    }

    // Event listener for the checkbox
    wakeLockToggle.addEventListener('change', () => {
      if (wakeLockToggle.checked) {
        requestWakeLock();
      } else {
        releaseWakeLock();
      }
    });

    // Handle page visibility change
    document.addEventListener('visibilitychange', () => {
      if (wakeLock && document.visibilityState === 'hidden') {
        releaseWakeLock(); // Automatically release wake lock when page is hidden
        wakeLockToggle.checked = false; // Update checkbox state
      }
    });

    // Enable wake lock by default when the page loads
    window.addEventListener('load', initializeWakeLock);
</script>
</body>

</html>