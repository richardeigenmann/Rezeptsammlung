<!DOCTYPE HTML>
<html>

<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>Rhabarberkuchen</title>
	<link rel="StyleSheet" href="rcp.css" type="text/css" media="screen">
	<meta name="RCP-Speise-Kategorie" content="Cakes">
	<meta name="RCP-Speise-Kategorie" content="Vegetarisch">
	<meta name="RCP-Speise-Kategorie" content="Aus dem Ofen">
	<meta name="RCP-Zutat" content="Mehl">
	<meta name="RCP-Zutat" content="Butter">
	<meta name="RCP-Zutat" content="Eier">
	<meta name="RCP-Zutat" content="Zucker">
	<meta name="RCP-Zutat" content="Milch">
	<meta name="RCP-Zutat" content="Rhabarber">
	<meta name="RCP-Zutat" content="Haseln&uuml;sse">
	<meta name="RCP-Zutat" content="Vanillezucker">
	<meta name="RCP-Bewertung" content="4 Sterne">
	<meta name="RCP-Quelle" content="Herbert Eigenmann">
</head>

<body>
	<h1>Rhabarberkuchen</h1>
	<img src="Rcp294.jpg" alt="Rhabarberkuchen" width="400" height="339">

	<table>
		<tbody>
			<tr>
				<td colspan="2"><strong>Zutaten:</strong></td>
			</tr>
			<tr>
				<td colspan=2><strong>Teig</strong></td>
			</tr>
			<tr>
				<td class="td-qty">280 g</td>
				<td><strong>Mehl</strong></td>
			</tr>
			<tr>
				<td class="td-qty">100 g</td>
				<td><strong>Butter</strong></td>
			</tr>
			<tr>
				<td class="td-qty">3</td>
				<td><strong>Eigelb</strong></td>
			</tr>
			<tr>
				<td class="td-qty">3 EL</td>
				<td><strong>Zucker</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1/2 dl</td>
				<td><strong>Milch</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1/2 TL</td>
				<td><strong>Salz</strong></td>
			</tr>
			<tr>
				<td colspan=2><strong>F&uuml;llung</strong></td>
			</tr>
			<tr>
				<td class="td-qty">550 g</td>
				<td><strong>Rhabarber</strong></td>
			</tr>
			<tr>
				<td class="td-qty">150 g</td>
				<td><strong>Zucker</strong></td>
			</tr>
			<tr>
				<td class="td-qty">150 g</td>
				<td><strong>Haseln&uuml;sse</strong></td>
			</tr>
			<tr>
				<td class="td-qty"></td>
				<td><strong>Vanillezucker</strong></td>
			</tr>
		</tbody>
	</table>

	<h2>Zubereitung:</h2>
	<p>M&uuml;rbeteig bereiten. 30 Minuten ruhen lassen.</p>
	<p>Teig halbieren und auswallen (so gut das geht...). Erste H&auml;lfte in gut gefetteter Springform auslegen, dass
		ein 2 Finger hoher Rand entsteht.</p>
	<p>Haseln&uuml;sse mit Zucker und Vanillezucker mischen, erste H&auml;lfte davon auf Teigboden ausbreiten,
		gew&uuml;rfelten Rhabarber dar&uuml;ber. Dann den Rest der Haseln&uuml;sse.
	</p>
	<p>Schliesslich die andere Teigh&auml;lfte dar&uuml;ber legen, an den R&auml;ndern gut andr&uuml;cken.</p>
	<p>Mit (wenig) verbliebenem Eiweiss bestreichen. Im vorgeheizten Ofen bei nicht zu grosser Hitze (vielleicht
		180&deg;C gut durchbacken (vielleicht 1 Stunde). Mit Puderzucker gut bestreuen.</p>

	<h2>Quelle:</h2>
	<p>Herbert Eigenmann, Code: RHB</p>

	<h2>Bewertung:</h2>
	<p>Obwohl das Rezept doch eher vage Angaben zur Backzeit und Temperatur enthielt gelang mir der Kuchen sehr gut. Er
		ist wunderbar saftig. Da der Saft aber aus viel Zucker besteht ist er unglaublich s&uuml;ss. Besser man isst
		davon nur wenig. RE 6. April 2009</p>

<p CLASS='linkback'>
    <a href='https://richardeigenmann.github.io/RezeptsammlungNg' target='_parent'>
    Richi's Rezeptsammlung
    </a>
</p>
<label>
    <input type="checkbox" id="wakeLockToggle" checked>
    Wake Lock to prevent screen timeout
</label>
    
<script async src="https://www.googletagmanager.com/gtag/js?id=G-XWT8EWS5BN"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-XWT8EWS5BN');
  // Function to request a wake lock
  async function requestWakeLock() {
      try {
        wakeLock = await navigator.wakeLock.request('screen');
        //statusText.innerHTML = 'Wake Lock is currently <strong>active</strong>.';

        // Listen for wake lock being released
        wakeLock.addEventListener('release', () => {
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        wakeLockToggle.checked = false; // Update checkbox state
        });

        console.log('Wake Lock activated.');
      } catch (err) {
        console.error(`Failed to acquire wake lock: ${err.message}`);
      }
    }

  // Function to release the wake lock
  function releaseWakeLock() {
      if (wakeLock) {
        wakeLock.release();
        wakeLock = null;
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        console.log('Wake Lock released.');
      }
    }

  // Initialize wake lock on page load
  async function initializeWakeLock() {
      if ('wakeLock' in navigator) {
          await requestWakeLock(); // Enable wake lock by default
      } else {
        //statusText.innerHTML = 'Wake Lock is <strong>not supported</strong> by your browser.';
      }
  }

    // Event listener for the checkbox
    wakeLockToggle.addEventListener('change', () => {
      if (wakeLockToggle.checked) {
    requestWakeLock();
      } else {
    releaseWakeLock();
      }
    });

    // Handle page visibility change
    document.addEventListener('visibilitychange', () => {
      if (wakeLock && document.visibilityState === 'hidden') {
    releaseWakeLock(); // Automatically release wake lock when page is hidden
  wakeLockToggle.checked = false; // Update checkbox state
      }
    });

  // Enable wake lock by default when the page loads
  window.addEventListener('load', initializeWakeLock);
</script>
</body>

</html>