<!DOCTYPE HTML>
<html>

<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>Kalter Marroni-Hund</title>
	<link rel="StyleSheet" href="rcp.css" type="text/css" media="screen">
	<meta name="RCP-Speise-Kategorie" content="Cakes">
	<meta name="RCP-Speise-Kategorie" content="Desserts">
	<meta name="RCP-Speise-Kategorie" content="Vegetarisch">
	<meta name="RCP-Speise-Kategorie" content="Roheierspeisen">
	<meta name="RCP-Zutat" content="Kokosfett">
	<meta name="RCP-Zutat" content="Schokolade">
	<meta name="RCP-Zutat" content="Eier">
	<meta name="RCP-Zutat" content="Vanillezucker">
	<meta name="RCP-Zutat" content="Puderzucker">
	<meta name="RCP-Zutat" content="Marronipur&eacute;e">
	<meta name="RCP-Zutat" content="Petit Beurre">
	<meta name="RCP-Zutat" content="Kirsch">
	<meta name="RCP-Zutat" content="Mandelbl&auml;ttchen">
	<meta name="RCP-Zutat" content="Rahm">
	<meta name="RCP-Bewertung" content="4 Sterne">
	<meta name="RCP-Quelle" content="Kochen Heft">
</head>

<body>
	<h1>Kalter Marroni-Hund</h1>
	<img src="Rcp480.jpg" alt="Kalter Marroni-Hund" width="400" height="266">

	<table>
		<tbody>
			<tr>
				<td colspan="2"><strong>Zutaten f&uuml;r 20 St&uuml;ck:</strong></td>
			</tr>
			<tr>
				<td class="td-qty">150 g</td>
				<td><strong>Kokosfett</strong></td>
			</tr>
			<tr>
				<td class="td-qty">100 g</td>
				<td><strong>Dunkle Schokolade</strong> (total mit Guss 180g)</td>
			</tr>
			<tr>
				<td class="td-qty">2</td>
				<td><strong>Eier</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1 Prise</td>
				<td><strong>Salz</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1 P&auml;ckchen</td>
				<td><strong>Vanillezucker</strong></td>
			</tr>
			<tr>
				<td class="td-qty">100 g</td>
				<td><strong>Puderzucker</strong></td>
			</tr>
			<tr>
				<td class="td-qty">220 g</td>
				<td><strong>Marronip&uuml;ree</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1 El</td>
				<td><strong>Kirsch</strong> (optional)</td>
			</tr>
			<tr>
				<td class="td-qty">ca. 40 St&uuml;ck</td>
				<td><strong>Petits Beurres</strong></td>
			</tr>
			<tr>
				<td class="td-qty">40 g</td>
				<td><strong>Mandelbl&auml;ttchen</strong></td>
			</tr>
			<tr>
				<td class="td-qty">0.5 dl</td>
				<td><strong>Rahm</strong></td>
			</tr>
			<tr>
				<td class="td-qty">80 g</td>
				<td><strong>Dunkle Schokolade</strong></td>
			</tr>
		</tbody>
	</table>


	<h2>Zubereitung:</h2>
	<p>In einer kleinen Pfanne das Kokosfett bei mittlerer Hitze schmelzen. Etwas abk&uuml;hlen lassen. 100g Schokolade
		zerbrechen und in einer Sch&uuml;ssel &uuml;ber dem Wasserbad langsam schmelzen (Nur 100g, die anderen 80g kommen in den Guss!).
		Geht genausogut in 1 Pfanne auf dem Induktionsherd, Stufe 3 von 9)</p>
	<p>Eier (oder pasteurisierte Eier), Salz, Vanillezucker und Puderzucker zu einer hellen, sehr schaumigen Masse aufschlagen. Die geschmolzene
		Schokolade und das Marronip&uuml;ree dazugeben und alles gut verr&uuml;hren. Das Fett untermischen.</p>
	<p>Optional noch 1 Essl&ouml;ffel Kirsch beigeben.</p>
	<p>Eine etwa 30 cm lange Cakeform mit Alufolie oder Backpapier so auslegen, dass die Enden &uuml;ber die Form
		hinauslappen. Abwechselnd 1 Lage Petits Beurres und etwas Marroni-Schokolade-Masse einf&uuml;llen, bis alle
		Zutaten aufgebraucht sind. Den Kuchen decken und mindestens 3 Stunden k&uuml;hl stellen.</p>
	<p>In einer trockenen Pfanne die Mandelbl&auml;ttchen ohne Fettzugabe leicht r&ouml;sten und grob zerdr&uuml;cken.
	</p>
	<p>Die restlichen 80g Schokolade zerbr&ouml;ckeln. Mit dem Rahm in ein Pf&auml;nnchen geben und auf kleinem Feuer
		schmelzen lassen.</p>
	<p>Den Cake aus der Form heben. Mit der Schokoladenmasse bestreichen und mit den Mandeln bestreuen. Bis zum
		Servieren k&uuml;hl stellen.</p>
	<p>Den Marroni-Hund gut gek&uuml;hlt in etwa 1cm dicke Tranchen aufschneiden.</p>

	<h2>F&uuml;r den Kleinhaushalt:</h2>
	<p>F&uuml;r einen kleineren Hund die Zutaten halbieren und eine Cakeform von 1 Liter Inhalt verwenden</p>

	<h2>Quelle:</h2>
	<p>Kochen 10/2005 S 62.</p>

	<h2>Kalorien:</h2>
	<p>Pro St&uuml;ck 2g Eiweiss, 14g Fett, 23g Kohlenhydrate; 235 Kilo-Kalorien, 982 Kilo-Joule</p>

	<h2>Bewertung:</h2>
	<p>Sehr reichhaltig und unendlich fein. RE 26.7.2009</p>
	<p>Wir glauben man k&ouml;nnte einen Essl&ouml;ffel Kirsch in die Masse geben. Aber maximal einen denn sonst
		schmeckt alles nach Kirsch und das w&auml;re zu viel. RE 4.11.2012</p>

<p CLASS='linkback'>
    <a href='https:\/\/richardeigenmann.github.io\/RezeptsammlungNg' target='_parent'>
    Richi's Rezeptsammlung
    </a>
</p>
<label>
    <input type="checkbox" id="wakeLockToggle" checked>
    Wake Lock to prevent screen timeout
</label>
    <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-47341387-3', 'auto');
  ga('send', 'pageview');

    let wakeLock = null; // Variable to hold the wake lock instance
    const statusText = document.getElementById('status');
    const wakeLockToggle = document.getElementById('wakeLockToggle');

    // Function to request a wake lock
    async function requestWakeLock() {
      try {
        wakeLock = await navigator.wakeLock.request('screen');
        //statusText.innerHTML = 'Wake Lock is currently <strong>active</strong>.';

        // Listen for wake lock being released
        wakeLock.addEventListener('release', () => {
          //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
          wakeLockToggle.checked = false; // Update checkbox state
        });

        console.log('Wake Lock activated.');
      } catch (err) {
        console.error(`Failed to acquire wake lock: ${err.message}`);
      }
    }

    // Function to release the wake lock
    function releaseWakeLock() {
      if (wakeLock) {
        wakeLock.release();
        wakeLock = null;
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        console.log('Wake Lock released.');
      }
    }

    // Initialize wake lock on page load
    async function initializeWakeLock() {
      if ('wakeLock' in navigator) {
        await requestWakeLock(); // Enable wake lock by default
      } else {
        //statusText.innerHTML = 'Wake Lock is <strong>not supported</strong> by your browser.';
      }
    }

    // Event listener for the checkbox
    wakeLockToggle.addEventListener('change', () => {
      if (wakeLockToggle.checked) {
        requestWakeLock();
      } else {
        releaseWakeLock();
      }
    });

    // Handle page visibility change
    document.addEventListener('visibilitychange', () => {
      if (wakeLock && document.visibilityState === 'hidden') {
        releaseWakeLock(); // Automatically release wake lock when page is hidden
        wakeLockToggle.checked = false; // Update checkbox state
      }
    });

    // Enable wake lock by default when the page loads
    window.addEventListener('load', initializeWakeLock);
</script>
</body>

</html>