<!DOCTYPE HTML>
<html>

<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>Gef&uuml;llte Gem&uuml;sezwiebeln</title>
	<link rel="StyleSheet" href="rcp.css" type="text/css" media="screen">
	<meta name="RCP-Speise-Kategorie" content="Aus dem Ofen">
	<meta name="RCP-Speise-Kategorie" content="Beilagen">
	<meta name="RCP-Zutat" content="Gem&uuml;sezwiebeln">
	<meta name="RCP-Zutat" content="Tomaten">
	<meta name="RCP-Zutat" content="Speckw&uuml;rfel">
	<meta name="RCP-Zutat" content="Champignons">
	<meta name="RCP-Zutat" content="Sbrinz">
	<meta name="RCP-Zutat" content="Butter">
	<meta name="RCP-Zutat" content="Petersilie">
	<meta name="RCP-Zutat" content="Oregano">
	<meta name="RCP-Bewertung" content="2 Sterne">
	<meta name="RCP-Quelle" content="Beobachter">
</head>

<body>
	<h1>Gef&uuml;llte Gem&uuml;sezwiebeln</h1>
	<img src="Rcp151.jpg" alt="Gef&uuml;llte Gem&uuml;sezwiebeln" width="400" height="302">

	<table>
		<tbody>
			<tr>
				<td colspan="2"><strong>Zutaten als Beilage f&uuml;r 4 Personen:</strong></td>
			</tr>
			<tr>
				<td class="td-qty">2</td>
				<td><strong>grosse Gem&uuml;sezwiebeln</strong></td>
			</tr>
			<tr>
				<td class="td-qty">3</td>
				<td><strong>Tomaten</strong></td>
			</tr>
			<tr>
				<td class="td-qty">100 g</td>
				<td><strong>Speckw&uuml;rfeli</strong></td>
			</tr>
			<tr>
				<td class="td-qty">100 g</td>
				<td><strong>Champignons</strong></td>
			</tr>
			<tr>
				<td class="td-qty">2 El</td>
				<td><strong>Sbrinz</strong></td>
			</tr>
			<tr>
				<td class="td-qty">2 El</td>
				<td><strong>Butter</strong></td>
			</tr>
			<tr>
				<td class="td-qty"></td>
				<td><strong>Petersilie</strong></td>
			</tr>
			<tr>
				<td class="td-qty"></td>
				<td><strong>Pfeffer</strong></td>
			</tr>
			<tr>
				<td class="td-qty"></td>
				<td><strong>Oregano</strong></td>
			</tr>
		</tbody>
	</table>

	<h2>Zubereitung:</h2>
	<p>Die Zwiebeln sch&auml;len, halbieren und etwas aush&ouml;hlen. Die H&auml;lften in einem Topf, bedeckt mit
		Salzwasser, etwa 20 Minuten kochen. Abtropfen lassen.</p>
	<p>Das ausgeh&ouml;hlte Zwiebelfleisch fein w&uuml;rfeln. Butter erhitzen, Speck- und Zwiebelw&uuml;rfelchen darin
		glasig braten.</p>
	<p>Die zerschnittenen Tomaten und die in Scheiben geschnittenen Champignons dazugeben und einige Zeit
		mitd&uuml;nsten. Gehackte Petersilie und geriebenen Sbrinz darunter geben und mit Pfeffer und Oregano
		w&uuml;rzen.</p>
	<p>Die F&uuml;llung in die Zwiebelh&auml;lften verteilen und mit Butterfl&ouml;ckli belegen.</p>
	<p>Im vorgeheizten Backofen bei 200&deg;C C 15 Minuten &uuml;berbacken.</p>


	<h2>Quelle:</h2>
	<p>Beobachter, 20/89</p>

	<h2>Bewertung:</h2>
	<p>Schmeckt OK. RE 12.2.2009</p>

<p CLASS='linkback'>
    <a href='https://richardeigenmann.github.io/RezeptsammlungNg' target='_parent'>
    Richi's Rezeptsammlung
    </a>
</p>
<label>
    <input type="checkbox" id="wakeLockToggle" checked>
    Wake Lock to prevent screen timeout
</label>
    
<script async src="https://www.googletagmanager.com/gtag/js?id=G-XWT8EWS5BN"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-XWT8EWS5BN');
  // Function to request a wake lock
  async function requestWakeLock() {
      try {
        wakeLock = await navigator.wakeLock.request('screen');
        //statusText.innerHTML = 'Wake Lock is currently <strong>active</strong>.';

        // Listen for wake lock being released
        wakeLock.addEventListener('release', () => {
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        wakeLockToggle.checked = false; // Update checkbox state
        });

        console.log('Wake Lock activated.');
      } catch (err) {
        console.error(`Failed to acquire wake lock: ${err.message}`);
      }
    }

  // Function to release the wake lock
  function releaseWakeLock() {
      if (wakeLock) {
        wakeLock.release();
        wakeLock = null;
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        console.log('Wake Lock released.');
      }
    }

  // Initialize wake lock on page load
  async function initializeWakeLock() {
      if ('wakeLock' in navigator) {
          await requestWakeLock(); // Enable wake lock by default
      } else {
        //statusText.innerHTML = 'Wake Lock is <strong>not supported</strong> by your browser.';
      }
  }

    // Event listener for the checkbox
    wakeLockToggle.addEventListener('change', () => {
      if (wakeLockToggle.checked) {
    requestWakeLock();
      } else {
    releaseWakeLock();
      }
    });

    // Handle page visibility change
    document.addEventListener('visibilitychange', () => {
      if (wakeLock && document.visibilityState === 'hidden') {
    releaseWakeLock(); // Automatically release wake lock when page is hidden
  wakeLockToggle.checked = false; // Update checkbox state
      }
    });

  // Enable wake lock by default when the page loads
  window.addEventListener('load', initializeWakeLock);
</script>
</body>

</html>