<!DOCTYPE HTML>
<html>

<head>
	<meta http-equiv="content-type" content="text/html; charset=utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>Folien-Kartoffeln mit Ricotta-F&uuml;llung</title>
	<link rel="StyleSheet" href="rcp.css" type="text/css" media="screen">
	<meta name="RCP-Speise-Kategorie" content="Beilagen">
	<meta name="RCP-Zutat" content="Kartoffeln">
	<meta name="RCP-Zutat" content="Butter">
	<meta name="RCP-Zutat" content="Ricotta">
	<meta name="RCP-Zutat" content="Schnittlauch">
	<meta name="RCP-Zutat" content="Petersilie">
	<meta name="RCP-Zutat" content="Knoblauch">
	<meta name="RCP-Zutat" content="Sardellenfilets">
	<meta name="RCP-Zutat" content="Zitronensaft">
	<meta name="RCP-Bewertung" content="4 Sterne">
	<meta name="RCP-Quelle" content="Herbert Eigenmann">
</head>

<body>
	<h1>Folien-Kartoffeln mit Ricotta-F&uuml;llung</h1>
	<img src="Rcp060.jpg" alt="Folien-Kartoffeln mit Ricotta-F&uuml;llung" width="400" height="303">

	<table>
		<tbody>
			<tr>
				<td colspan="2">
					<strong>Zutaten f&uuml;r 4 Personen:</strong>
				</td>
			</tr>
			<tr>
				<td class="td-qty">8</td>
				<td>mittelgrosse <strong>Kartoffeln</strong></td>
			</tr>
			<tr>
				<td class="td-qty">40 g</td>
				<td><strong>Butter</strong></td>
			</tr>
			<tr>
				<td class="td-qty"></td>
				<td><strong>Salz, Pfeffer</strong></td>
			</tr>
			<tr>
				<td class="td-qty">250 g</td>
				<td><strong>Ricotta</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1 Bund</td>
				<td><strong>Schnittlauch</strong></td>
			</tr>
			<tr>
				<td class="td-qty">1 Bund</td>
				<td><strong>Petersilie</strong></td>
			</tr>
			<tr>
				<td class="td-qty">2</td>
				<td><strong>Knoblauchzehen</strong></td>
			</tr>
			<tr>
				<td class="td-qty">3</td>
				<td><strong>Sardellenfilets</strong></td>
			</tr>
			<tr>
				<td class="td-qty"></td>
				<td><strong>Zitronensaft</strong></td>
			</tr>
		</tbody>
	</table>

	<h2>Zubereitung:</h2>
	<p>Die gewaschenen, ungesch&auml;lten Kartoffeln mit einer Butterflocke und etwas Salz einzeln in Alufolie
		einwickeln.</p>
	<p>Im Backofen bei 250&deg;C w&auml;hrend 50 Minuten backen.</p>
	<p>Kreuzweise einschneiden und auseinander dr&uuml;cken. Mit einem L&ouml;ffelr&uuml;cken eine Vertiefung anbringen.
		Dann mit s&auml;mtlichen Zutaten vermischten Ricotta in die Vertiefungen verteilen.</p>
	<p>Die Kartoffeln nochmals f&uuml;r 10 Minuten in den Backofen geben.</p>


	<h2>Quelle:</h2>
	<p>Herbert Eigenmann, Code: FKR</p>


	<h2>Bewertung:</h2>
	<p>Gelang Sandra am 25.3.2008 ausgezeichnet. Wir hatten nur kleine Fr&uuml;hkartoffeln so reduzierte sich die
		Backzeit auf 30 Minuten. Die Sardellenfilets (vorg&auml;ngig klein schneiden) geben der F&uuml;llung ein
		gewisses "Etwas". Die Alufolie vorsichtig aufschneiden damit keine Alufolie in die Kartoffeln gelangt. RE
		25.3.2008</p>

<p CLASS='linkback'>
    <a href='https://richardeigenmann.github.io/RezeptsammlungNg' target='_parent'>
    Richi's Rezeptsammlung
    </a>
</p>
<label>
    <input type="checkbox" id="wakeLockToggle" checked>
    Wake Lock to prevent screen timeout
</label>
    
<script async src="https://www.googletagmanager.com/gtag/js?id=G-XWT8EWS5BN"></script>
<script>
  // Function to request a wake lock
  async function requestWakeLock() {
      try {
        wakeLock = await navigator.wakeLock.request('screen');
        //statusText.innerHTML = 'Wake Lock is currently <strong>active</strong>.';

        // Listen for wake lock being released
        wakeLock.addEventListener('release', () => {
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        wakeLockToggle.checked = false; // Update checkbox state
        });

        console.log('Wake Lock activated.');
      } catch (err) {
        console.error(`Failed to acquire wake lock: ${err.message}`);
      }
    }

  // Function to release the wake lock
  function releaseWakeLock() {
      if (wakeLock) {
        wakeLock.release();
        wakeLock = null;
        //statusText.innerHTML = 'Wake Lock is currently <strong>inactive</strong>.';
        console.log('Wake Lock released.');
      }
    }

  // Initialize wake lock on page load
  async function initializeWakeLock() {
      if ('wakeLock' in navigator) {
          await requestWakeLock(); // Enable wake lock by default
      } else {
        //statusText.innerHTML = 'Wake Lock is <strong>not supported</strong> by your browser.';
      }
  }

    // Event listener for the checkbox
    wakeLockToggle.addEventListener('change', () => {
      if (wakeLockToggle.checked) {
    requestWakeLock();
      } else {
    releaseWakeLock();
      }
    });

    // Handle page visibility change
    document.addEventListener('visibilitychange', () => {
      if (wakeLock && document.visibilityState === 'hidden') {
    releaseWakeLock(); // Automatically release wake lock when page is hidden
  wakeLockToggle.checked = false; // Update checkbox state
      }
    });

  // Enable wake lock by default when the page loads
  window.addEventListener('load', initializeWakeLock);
</script>
</body>

</html>